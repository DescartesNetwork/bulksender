{"version":3,"file":"static/js/src_bootstrap_app_tsx.7531ee08.chunk.js","mappings":"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","sources":["static.app.tsx","configs/manifest.config.ts","configs/sol.config.ts","configs/index.ts","model/main.controller.tsx","lib/tx.ts","lib/index.ts","lib/utils.ts","view/actions/estimate.tsx","view/actions/merge.tsx","view/actions/send.tsx","view/actions/index.tsx","view/collector.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","shared/hooks/useAccountBalance.ts","view/mintSelection.tsx","view/representor/line.tsx","view/representor/add.tsx","view/representor/decimals.tsx","view/representor/index.tsx","view/index.tsx","model/devTools.ts","model/index.ts","bootstrap.app.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"logo\", {\n  enumerable: true,\n  get: function () {\n    return _logo.default;\n  }\n});\nexports.panels = void 0;\nObject.defineProperty(exports, \"readme\", {\n  enumerable: true,\n  get: function () {\n    return _README.default;\n  }\n});\n\nvar _panel = _interopRequireDefault(require(\"./static/images/panel.png\"));\n\nvar _preview = _interopRequireDefault(require(\"./static/images/preview.png\"));\n\nvar _logo = _interopRequireDefault(require(\"./static/images/logo.png\"));\n\nvar _README = _interopRequireDefault(require(\"./static/docs/README.md\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst panels = [_panel.default, _preview.default];\nexports.panels = panels;","import { Env } from '@sentre/senhub'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net, rpc } from '@sentre/senhub'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n  bulksenderAddress: string\n  fee: number\n  taxman: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: 'FjkVzT6QJCQrgoZ8VoyAqysD5Mfa73ekpXWe9zDprWRA',\n    fee: 1000000,\n    taxman: '8W6QginLcAydYyMYjxuyKQN56NzeakDE3aRFrAmocS6D',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '',\n    fee: 1000000,\n    taxman: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '8WB9yeJ946594RHtxdNoKbwC2y13yCwJCtSY1mAeLWu1',\n    fee: 1000000,\n    taxman: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from '@sentre/senhub'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport type TransferData = Array<[string, string]>\nexport enum Status {\n  None,\n  Estimating,\n  Estimated,\n  Sending,\n  Done,\n}\nexport type State = {\n  mintAddress: string\n  data: TransferData /* address, amount */\n  decimalized: boolean\n  status: Status\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  mintAddress: '',\n  data: [],\n  decimalized: false,\n  status: Status.None,\n}\n\n/**\n * Actions\n */\n\nexport const setData = createAsyncThunk(\n  `${NAME}/setData`,\n  async (data: TransferData) => {\n    return { data, status: Status.None }\n  },\n)\n\nexport const setMintAddress = createAsyncThunk(\n  `${NAME}/setMintAddress`,\n  async (mintAddress: string) => {\n    return { mintAddress, status: Status.None }\n  },\n)\n\nexport const setDecimalized = createAsyncThunk(\n  `${NAME}/setDecimalized`,\n  async (decimalized: boolean) => {\n    return { decimalized, status: Status.None }\n  },\n)\n\nexport const setStatus = createAsyncThunk(\n  `${NAME}/setStatus`,\n  async (status: Status) => {\n    return { status }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setData.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setMintAddress.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDecimalized.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setStatus.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Connection, Transaction } from '@solana/web3.js'\n\nexport class TxError extends Error {\n  info: { txId: string }\n\n  constructor(msg: string, txId: string = '') {\n    super(msg)\n\n    this.name = `Error: ${msg}`\n    this.info = { txId }\n  }\n}\n\nclass Tx {\n  nodeUrl: string\n  connection: Connection\n  errorMapping: string[]\n\n  constructor(nodeUrl: string, errorMapping: string[] = []) {\n    this.nodeUrl = nodeUrl\n    this.errorMapping = errorMapping\n    this.connection = new Connection(this.nodeUrl, 'confirmed')\n  }\n\n  /**\n   * Build programmable error\n   * The method's precision os very relative, it's will parse wrong error in case of invoking programs\n   * @param er\n   * @param txId\n   * @returns\n   */\n  private throwError = (er: any, txId: string) => {\n    const defaultError = 'Transaction failed'\n    if (!er) throw new TxError(defaultError, txId)\n    const instructionError = er.InstructionError || []\n    if (typeof instructionError[1] == 'string')\n      throw new TxError(instructionError[1], txId)\n    const { Custom } = instructionError[1] || {}\n    if (typeof Custom !== 'number') throw new TxError(defaultError, txId)\n    throw new TxError(this.errorMapping[Custom] || defaultError, txId)\n  }\n\n  /**\n   * Broadcast a transaction to clusters and return the txId when it's confirmed\n   * @param transaction Signed transaction\n   * @returns transaction id\n   */\n  protected sendTransaction = async (\n    transaction: Transaction,\n  ): Promise<string> => {\n    const tx = transaction.serialize()\n    const txId = await this.connection.sendRawTransaction(tx, {\n      skipPreflight: true,\n      preflightCommitment: 'confirmed',\n    })\n    const {\n      value: { err },\n    } = await this.connection.confirmTransaction(txId, 'confirmed')\n    if (err) return this.throwError(err, txId)\n    return txId\n  }\n\n  /**\n   * Add transaction commitment\n   * @param transaction\n   * @returns transaction with added commitment\n   */\n  protected addRecentCommitment = async (\n    transaction: Transaction,\n  ): Promise<Transaction> => {\n    const { blockhash } = await this.connection.getLatestBlockhash('confirmed')\n    transaction.recentBlockhash = blockhash\n    return transaction\n  }\n}\n\nexport default Tx\n","import {\n  PublicKey,\n  Transaction,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from '@solana/web3.js'\nimport { SPLT, account, WalletInterface } from '@senswap/sen-js'\n\nimport Tx from './tx'\n\nconst soproxABI = require('soprox-abi')\n\nconst ErrorMapping = [\n  'Invalid instruction',\n  'Incorrect program id',\n  'Operation overflowed',\n  'Invalid owner',\n]\n\nclass Bulksender extends Tx {\n  readonly bulksenderProgramId: PublicKey\n  readonly spltProgramId: PublicKey\n  readonly splataProgramId: PublicKey\n  private _splt: SPLT\n\n  constructor(\n    bulksenderProgramAddress: string,\n    spltProgramAddress: string,\n    splataProgramAddress: string,\n    nodeUrl: string,\n  ) {\n    super(nodeUrl, ErrorMapping)\n\n    if (!account.isAddress(bulksenderProgramAddress))\n      throw new Error('Invalid bulksender program address')\n    if (!account.isAddress(spltProgramAddress))\n      throw new Error('Invalid SPL token program address')\n    if (!account.isAddress(splataProgramAddress))\n      throw new Error('Invalid SPL associated token program address')\n    this.bulksenderProgramId = account.fromAddress(bulksenderProgramAddress)\n    this.spltProgramId = account.fromAddress(spltProgramAddress)\n    this.splataProgramId = account.fromAddress(splataProgramAddress)\n\n    this._splt = new SPLT(spltProgramAddress, splataProgramAddress, nodeUrl)\n  }\n\n  /**\n   * Checked transfer\n   * @param amount Number of tokens\n   * @param dstAddress Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedTransfer = async (\n    amount: bigint,\n    dstAddress: string,\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Validation\n    if (!account.isAddress(dstAddress))\n      throw new Error('Invalid destination address')\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      dstAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const dstPublicKey = account.fromAddress(dstAddress)\n    const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'amount', type: 'u64' },\n      ],\n      { code: 0, amount },\n    )\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n        { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: dstPublicKey, isSigner: false, isWritable: false },\n        { pubkey: dstAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n      ],\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    // Sign tx\n    transaction = await wallet.signTransaction(transaction)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n\n  /**\n   * Build checkedBulkTransfer transaction\n   * @param amounts\n   * @param dstAddresses\n   * @param mintAddress\n   * @param wallet\n   * @returns\n   */\n  private buildCheckedBulkTransferTransaction = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n    fee: number,\n    taxmanAddress: string,\n    simulating: boolean = false,\n  ): Promise<Transaction> => {\n    // Validation\n    if (!account.isAddress(taxmanAddress))\n      throw new Error(`Invalid taxman address: ${taxmanAddress}`)\n    for (const dstAddress of dstAddresses) {\n      if (!account.isAddress(dstAddress))\n        throw new Error(`Invalid destination address: ${dstAddress}`)\n    }\n    for (const amount of amounts) {\n      if (!amount) throw new Error(`Invalid amount: ${amount}`)\n    }\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    if (amounts.length !== dstAddresses.length)\n      throw new Error(\n        `The number of amounts and the number of addresses are unmatcher (${amounts.length}, ${dstAddresses.length})`,\n      )\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    if (!simulating) transaction = await this.addRecentCommitment(transaction)\n    // Bulk transfer ix\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'num_txs', type: 'u32' },\n        { key: 'amounts', type: `[u64;${amounts.length}]` },\n      ],\n      { code: 1, num_txs: amounts.length, amounts },\n    )\n    let keys = [\n      { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n      { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n      { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n    ]\n    for (const dstAddress of dstAddresses) {\n      const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n        dstAddress,\n        mintAddress,\n      )\n      const dstPublicKey = account.fromAddress(dstAddress)\n      const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n      keys.push({ pubkey: dstPublicKey, isSigner: false, isWritable: false })\n      keys.push({\n        pubkey: dstAssociatedPublicKey,\n        isSigner: false,\n        isWritable: true,\n      })\n    }\n    const bulkTransferInstruction = new TransactionInstruction({\n      keys,\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(bulkTransferInstruction)\n    // Fee ix\n    const feeInstruction = SystemProgram.transfer({\n      fromPubkey: payerPublicKey,\n      toPubkey: new PublicKey(taxmanAddress),\n      lamports: fee,\n    })\n    transaction.add(feeInstruction)\n    transaction.feePayer = payerPublicKey\n    return transaction\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Error\n   */\n  simulateBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n    fee: number,\n    taxmanAddress: string,\n  ): Promise<boolean> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n      fee,\n      taxmanAddress,\n      true,\n    )\n    // Simulate the transaction\n    const {\n      value: { err },\n    } = await this.connection.simulateTransaction(transaction)\n    if (err) return false\n    return true\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n    fee: number,\n    taxmanAddress: string,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Build transaction\n    let transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n      fee,\n      taxmanAddress,\n    )\n    // Sign tx\n    transaction = await wallet.signTransaction(transaction)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n}\n\nexport default Bulksender\n","export const toBigInt = (number: string): bigint => {\n  try {\n    return BigInt(number)\n  } catch (er) {\n    return BigInt(0)\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { util } from '@sentre/senhub'\n\nimport { Button } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport configs from 'configs'\nimport { AppDispatch, AppState } from 'model'\nimport { setStatus, Status, TransferData } from 'model/main.controller'\nimport Bulksender from 'lib'\nimport { toBigInt } from 'lib/utils'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node, taxman, fee },\n} = configs\n\nexport type EstimateProps = {\n  onChange: (bulk: TransferData[]) => void\n  disabled?: boolean\n}\n\nconst Estimate = ({ disabled = false, onChange = () => {} }: EstimateProps) => {\n  const [progress, setProgess] = useState(0)\n  const [bulk, setBulk] = useState<TransferData[]>([])\n  const dispatch = useDispatch<AppDispatch>()\n  const data = useSelector((state: AppState) => state.main.data)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const status = useSelector((state: AppState) => state.main.status)\n\n  // Compute bulk\n  const computeBulk = useCallback(async () => {\n    const {\n      sentre: { wallet },\n    } = window\n    if (!wallet) return setBulk([])\n\n    await dispatch(setStatus(Status.Estimating))\n\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    let currentData = [...data]\n    const newBulks: TransferData[] = [[]]\n    while (currentData.length) {\n      const [address, amount] = currentData.shift() as [string, string]\n      const latestBulk = newBulks[newBulks.length - 1]\n      const simulatedBulk: TransferData = [...latestBulk, [address, amount]]\n      await util.asyncWait(250) // Avoid too many requests\n      let ok = false\n      try {\n        ok = await bulksender.simulateBulkTransfer(\n          simulatedBulk.map(([_, amount]) => toBigInt(amount)),\n          simulatedBulk.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n          fee,\n          taxman,\n        )\n      } catch (er) {\n        ok = false\n      }\n      // There is a failed record\n      if (!ok && simulatedBulk.length <= 1) {\n        setBulk([])\n        window.notify({\n          type: 'error',\n          description:\n            'Cannot handle the transaction. Make sure that your SOL balance is enough to pay fees.',\n        })\n        return dispatch(setStatus(Status.None))\n      }\n      // Keep moving\n      if (ok) newBulks[newBulks.length - 1] = simulatedBulk\n      else newBulks.push([[address, amount]])\n      // Progress\n      setProgess(newBulks.flat().length / data.length)\n    }\n    setBulk(newBulks)\n    return dispatch(setStatus(Status.Estimated))\n  }, [data, dispatch, mintAddress])\n\n  useEffect(() => {\n    onChange(bulk)\n    return () => setProgess(0)\n  }, [bulk, onChange])\n\n  return (\n    <Button\n      type=\"primary\"\n      icon={<IonIcon name=\"send\" />}\n      onClick={computeBulk}\n      disabled={disabled}\n      loading={status === Status.Estimating}\n      block\n    >\n      Optimize {Math.floor(progress * 100)}%\n    </Button>\n  )\n}\n\nexport default Estimate\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { AppState } from 'model'\nimport { TransferData, setData } from 'model/main.controller'\nimport { toBigInt } from 'lib/utils'\n\nexport type MergeProps = {\n  disabled?: boolean\n}\n\nconst Merge = ({ disabled = false }: MergeProps) => {\n  const dispatch = useDispatch()\n  const data = useSelector((state: AppState) => state.main.data)\n\n  // Merge duplicated addresses (must call when no error)\n  const merge = useCallback(async () => {\n    const nextData = [] as TransferData\n    for (const [address, amount] of data) {\n      const index = nextData.findIndex(([addr]) => addr === address)\n      if (index >= 0) {\n        nextData[index][1] = (\n          toBigInt(nextData[index][1]) + toBigInt(amount)\n        ).toString()\n      } else {\n        nextData.push([address, amount])\n      }\n    }\n    await dispatch(setData(nextData))\n  }, [data, dispatch])\n\n  return (\n    <Button\n      type=\"text\"\n      icon={<IonIcon name=\"git-merge-outline\" />}\n      onClick={merge}\n      disabled={disabled}\n      block\n    >\n      Merge\n    </Button>\n  )\n}\n\nexport default Merge\n","import { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { util } from '@sentre/senhub'\n\nimport { Button } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport configs from 'configs'\nimport { AppState } from 'model'\nimport { TransferData } from 'model/main.controller'\nimport Bulksender from 'lib'\nimport { toBigInt } from 'lib/utils'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node, taxman, fee },\n} = configs\n\nexport type SendProps = {\n  bulk: TransferData[]\n  disabled: boolean\n}\n\nconst Send = ({ bulk = [], disabled = false }: SendProps) => {\n  const [loading, setLoading] = useState(false)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n\n  // Send a bulk\n  const send = useCallback(async () => {\n    setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    for (const transferData of bulk) {\n      try {\n        const {\n          sentre: { wallet },\n        } = window\n        if (!wallet) return\n        const { txId } = await bulksender.checkedBulkTransfer(\n          transferData.map(([_, amount]) => toBigInt(amount)),\n          transferData.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n          fee,\n          taxman,\n        )\n        window.notify({\n          type: 'success',\n          description: 'Successfully transfer tokens. Click to view details.',\n          onClick: () => window.open(util.explorer(txId), '_blank'),\n        })\n      } catch (er: any) {\n        window.notify({ type: 'error', description: er.message })\n      }\n    }\n    return setLoading(false)\n  }, [bulk, mintAddress])\n\n  return (\n    <Button\n      type=\"primary\"\n      icon={<IonIcon name=\"send\" />}\n      onClick={send}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      Send\n    </Button>\n  )\n}\n\nexport default Send\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport {\n  useAccounts,\n  useWalletAddress,\n  useWalletBalance,\n  useMintDecimals,\n  util,\n} from '@sentre/senhub'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport Estimate from './estimate'\nimport Merge from './merge'\nimport Send from './send'\n\nimport { AppState } from 'model'\nimport { Status, TransferData } from 'model/main.controller'\nimport { toBigInt } from 'lib/utils'\n\nconst TX_FEE = 0.015\n\nconst Actions = () => {\n  const [error, setError] = useState<boolean | string>(false)\n  const [bulk, setBulk] = useState<Array<TransferData>>([])\n  const data = useSelector((state: AppState) => state.main.data)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const status = useSelector((state: AppState) => state.main.status)\n  const accounts = useAccounts()\n  const walletAddress = useWalletAddress()\n  const lamports = useWalletBalance()\n  const decimals = useMintDecimals({ mintAddress }) || 0\n\n  const fee = useMemo(() => bulk.length * TX_FEE, [bulk.length])\n\n  // Need to merge\n  const duplicated = useMemo(() => {\n    if (!data || !data.length) return false\n    const duplicatedElements = data.filter(([address], index) => {\n      const expectedIndex = data.findIndex(\n        ([expectedAddress]) => address === expectedAddress,\n      )\n      return expectedIndex !== index && expectedIndex > -1\n    })\n    if (duplicatedElements.length > 0) return true\n    return false\n  }, [data])\n\n  // Checked error\n  const checkError = useCallback(async () => {\n    // Check data length\n    if (!data || !data.length) return setError(true)\n    // Check wallet address\n    if (!util.isAddress(walletAddress))\n      return setError('Please connect your wallet')\n    if (!util.isAddress(mintAddress))\n      return setError('Please select a token to send')\n    // Check data contents\n    const failedElements = data.filter(([address, amount]) => {\n      if (!util.isAddress(address)) return true\n      if (!toBigInt(amount)) return true\n      return false\n    })\n    if (failedElements.length > 0) return setError(true)\n    // Check sol balance\n    if (Number(lamports) / 10 ** 9 < fee)\n      return setError(\n        `Not enough SOL to execute the transactions. It requires ${fee} SOL at least.`,\n      )\n    // Check token balance\n    const {\n      sentre: { splt },\n    } = window\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    const { amount: balance } = accounts[accountAddress] || {\n      amount: BigInt(0),\n    }\n    const amount = data.reduce((a, [_, b]) => a + toBigInt(b), BigInt(0))\n    if (balance < amount)\n      return setError(\n        `Not enough token balance. It requires ${utils.undecimalize(\n          amount,\n          decimals,\n        )} tokens over your balance, ${utils.undecimalize(\n          balance,\n          decimals,\n        )} tokens.`,\n      )\n    // No error\n    return setError(false)\n  }, [data, mintAddress, accounts, walletAddress, lamports, fee, decimals])\n\n  useEffect(() => {\n    checkError()\n  }, [checkError])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        {typeof error === 'string' ? (\n          <Space>\n            <IonIcon\n              name=\"information-circle-outline\"\n              style={{ color: '#F2323F' }}\n            />\n            <Typography.Text type=\"danger\">{error}</Typography.Text>\n          </Space>\n        ) : (\n          <Space>\n            <IonIcon name=\"information-circle-outline\" />\n            <Typography.Text type={bulk.length ? undefined : 'secondary'}>\n              To send tokens to <strong>{data.length}</strong> address(es), you\n              will need to sign <strong>{bulk.length}</strong> time(s) with the\n              total estimated fee is ~{fee} SOL.\n            </Typography.Text>\n          </Space>\n        )}\n      </Col>\n      <Col span={12}>\n        <Merge\n          disabled={\n            !duplicated ||\n            !!error ||\n            [Status.Estimated, Status.Sending, Status.Done].includes(status)\n          }\n        />\n      </Col>\n      <Col span={12}>\n        {[Status.None, Status.Estimating].includes(status) ? (\n          <Estimate disabled={!!error} onChange={setBulk} />\n        ) : (\n          <Send bulk={bulk} disabled={!!error} />\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default Actions\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Papa from 'papaparse'\n\nimport { Row, Col, Upload, Space, Button, Typography } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { TransferData, setData, setDecimalized } from 'model/main.controller'\n\nconst parse = (file: any): Promise<TransferData> => {\n  return new Promise((resolve, reject) => {\n    return Papa.parse(file, {\n      skipEmptyLines: true,\n      complete: ({ data }) => resolve(data as TransferData),\n    })\n  })\n}\n\nconst Collector = () => {\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const upload = async (file: any) => {\n    setLoading(true)\n    dispatch(setDecimalized(false))\n    dispatch(setData(await parse(file)))\n    setLoading(false)\n    return false\n  }\n  const remove = async () => {\n    setLoading(true)\n    dispatch(setData([]))\n    setLoading(false)\n    return true\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ marginBottom: 16 }}>\n        <Upload.Dragger\n          accept=\".csv,.txt\"\n          beforeUpload={upload}\n          onRemove={remove}\n          maxCount={1}\n        >\n          <Space direction=\"vertical\" size=\"large\" align=\"center\">\n            <Typography.Title level={3}>\n              Click or Drop file to upload\n            </Typography.Title>\n            <Typography.Text>\n              The accepted file types are <code>.csv</code>, <code>.txt</code>.\n            </Typography.Text>\n            <Button\n              type=\"primary\"\n              icon={<IonIcon name=\"cloud-upload-outline\" />}\n              loading={loading}\n            >\n              Upload\n            </Button>\n          </Space>\n        </Upload.Dragger>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Collector\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { tokenProvider, usePool, util } from '@sentre/senhub'\n\nimport { Avatar } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(async (address: string) => {\n    const token = await tokenProvider.findByAddress(address)\n    if (token?.logoURI) return token.logoURI\n    return undefined\n  }, [])\n\n  const deriveAvatars = useCallback(async () => {\n    if (!util.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { tokenProvider, usePool, util } from '@sentre/senhub'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { pools } = usePool()\n\n  const deriveName = useCallback(async (address: string) => {\n    const token = await tokenProvider.findByAddress(address)\n    if (token?.name) return token.name\n    return DEFAULT_NAME\n  }, [])\n\n  const deriveNames = useCallback(async () => {\n    if (!util.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { tokenProvider, usePool, util } from '@sentre/senhub'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(async (address: string) => {\n    const token = await tokenProvider.findByAddress(address)\n    if (token?.symbol) return token.symbol\n    return address.substring(0, 4)\n  }, [])\n\n  const deriveSymbols = useCallback(async () => {\n    if (!util.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useEffect, useState } from 'react'\nimport { DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport {\n  useAccounts,\n  useMintDecimals,\n  useWalletAddress,\n  useWalletBalance,\n  util,\n} from '@sentre/senhub'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !util.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for working.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const walletAddress = useWalletAddress()\n  const lamports = useWalletBalance()\n  const accounts = useAccounts()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals({ mintAddress }) || 0\n\n  if (!util.isAddress(walletAddress) || !util.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const walletAddress = useWalletAddress()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!util.isAddress(walletAddress) || !util.isAddress(mintAddress))\n        return setAccountAddress('')\n      const address = await util.deriveAssociatedAddress(\n        walletAddress,\n        mintAddress,\n      )\n      return setAccountAddress(address)\n    })()\n  })\n\n  return data\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { useAccounts, util } from '@sentre/senhub'\n\nimport { Row, Col, Select, Space, Typography, Card } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'model'\nimport { setMintAddress } from 'model/main.controller'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\n\nconst MintSelection = () => {\n  const dispatch = useDispatch()\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const accounts = useAccounts()\n  const { balance } = useAccountBalanceByMintAddress(mintAddress)\n\n  return (\n    <Card>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Select\n            size=\"large\"\n            placeholder=\"Select token\"\n            style={{ width: '100%' }}\n            onChange={(mintAddress: string) =>\n              dispatch(setMintAddress(mintAddress))\n            }\n          >\n            {Object.values(accounts).map(({ mint: mintAddress }, i) => (\n              <Select.Option key={i} value={mintAddress}>\n                <Space align=\"center\">\n                  <MintAvatar mintAddress={mintAddress} />\n                  <Typography.Text type=\"secondary\">\n                    <MintSymbol mintAddress={mintAddress} />\n                  </Typography.Text>\n                  <Typography.Text>\n                    <MintName mintAddress={mintAddress} />\n                  </Typography.Text>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={24}>\n          <Space>\n            <Typography.Text type=\"secondary\">Balance:</Typography.Text>\n            <Typography.Text>\n              {util.numeric(balance).format('0,0.[0000]')}\n            </Typography.Text>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintSelection\n","import { useDispatch, useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport { util, useMintDecimals } from '@sentre/senhub'\n\nimport { Row, Col, Button, Typography, Tooltip, Divider, Space } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setData } from 'model/main.controller'\nimport { toBigInt } from 'lib/utils'\n\nexport type LineProps = {\n  index: number\n  accountAddress: string\n  amount: string\n}\n\nconst Line = ({ index, accountAddress, amount }: LineProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const data = useSelector((state: AppState) => state.main.data)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const decimals = useMintDecimals({ mintAddress }) || 0\n\n  const remove = (index: number) => {\n    const nextData = [...data]\n    nextData.splice(index, 1)\n    return dispatch(setData(nextData))\n  }\n\n  const error = !util.isAddress(accountAddress)\n    ? 'Invalid address'\n    : !toBigInt(amount)\n    ? 'Invalid amount'\n    : ''\n  const duplicatedIndex = data\n    .slice(0, index)\n    .findIndex(([address]) => address === accountAddress)\n  const warning =\n    duplicatedIndex >= 0 ? `Duplicated address to #${duplicatedIndex}` : ''\n\n  const display = !toBigInt(amount)\n    ? amount\n    : utils.undecimalize(toBigInt(amount), decimals)\n\n  return (\n    <Row gutter={[16, 8]}>\n      <Col span={24}>\n        <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n          <Col>\n            <Typography.Text type=\"secondary\">#{index + 1}</Typography.Text>\n          </Col>\n          <Col span={12}>\n            <Tooltip title={accountAddress}>\n              <Typography.Text ellipsis>{accountAddress}</Typography.Text>\n            </Tooltip>\n          </Col>\n          <Col flex=\"auto\">\n            <Space>\n              <Typography.Text>{display}</Typography.Text>\n              <Typography.Text>\n                <MintSymbol mintAddress={mintAddress} />\n              </Typography.Text>\n            </Space>\n          </Col>\n          <Col>\n            <Space align=\"center\">\n              {warning ? (\n                <Tooltip title={warning}>\n                  <IonIcon\n                    name=\"alert-circle-outline\"\n                    style={{ color: '#FCB017' }}\n                  />\n                </Tooltip>\n              ) : null}\n              {error ? (\n                <Tooltip title={error}>\n                  <IonIcon\n                    name=\"warning-outline\"\n                    style={{ color: '#F2323F' }}\n                  />\n                </Tooltip>\n              ) : null}\n              <Button\n                type=\"text\"\n                icon={<IonIcon name=\"trash-outline\" />}\n                onClick={() => remove(index)}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Line\n","import { ChangeEvent, useCallback, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport { util, useMintDecimals } from '@sentre/senhub'\n\nimport { Row, Col, Button, Input, InputNumber } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setData } from 'model/main.controller'\n\nconst Add = () => {\n  const [address, setAddress] = useState('')\n  const [amount, setAmount] = useState('')\n  const data = useSelector((state: AppState) => state.main.data)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const decimals = useMintDecimals({ mintAddress }) || 0\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onAddress = (e: ChangeEvent<HTMLInputElement>) =>\n    setAddress(e.target.value || '')\n  const onAmount = (val: string) => setAmount(val)\n\n  const ok = useMemo(() => {\n    if (!util.isAddress(address) || !Number(amount)) return false\n    return true\n  }, [address, amount])\n\n  const add = useCallback(async () => {\n    if (!util.isAddress(address))\n      return window.notify({ type: 'warning', description: 'Invalid address' })\n    if (!Number(amount))\n      return window.notify({ type: 'warning', description: 'Invalid amount' })\n    const nextData = [...data]\n    nextData.push([address, utils.decimalize(amount, decimals).toString()])\n    await dispatch(setData(nextData))\n    await setAddress('')\n    await setAmount('')\n  }, [address, amount, data, decimals, dispatch])\n\n  return (\n    <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n      <Col span={12}>\n        <Input placeholder=\"Address\" value={address} onChange={onAddress} />\n      </Col>\n      <Col flex=\"auto\">\n        <InputNumber\n          placeholder=\"Amount\"\n          value={amount}\n          onChange={onAmount}\n          stringMode\n          type=\"number\"\n          controls={false}\n          style={{ width: '100%' }}\n        />\n      </Col>\n      <Col>\n        <Button\n          type=\"primary\"\n          icon={<IonIcon name=\"add-outline\" />}\n          onClick={add}\n          disabled={!ok}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Add\n","import { useDispatch, useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\nimport { useMintDecimals } from '@sentre/senhub'\n\nimport { Col, Row, Switch, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'model'\nimport { setData, setDecimalized, TransferData } from 'model/main.controller'\nimport { toBigInt } from 'lib/utils'\n\nconst Decimals = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const data = useSelector((state: AppState) => state.main.data)\n  const decimalized = useSelector((state: AppState) => state.main.decimalized)\n  const mintAddress = useSelector((state: AppState) => state.main.mintAddress)\n  const decimals = useMintDecimals({ mintAddress, force: true }) || 0\n\n  const onSwitch = async (checked: boolean) => {\n    const nextData: TransferData = data.map(([address, amount]) => {\n      const newAmount = checked\n        ? utils.decimalize(amount, decimals).toString()\n        : utils.undecimalize(toBigInt(amount), decimals)\n      return [address, newAmount]\n    })\n    await dispatch(setDecimalized(checked))\n    await dispatch(setData(nextData))\n  }\n\n  return (\n    <Row gutter={[8, 8]} justify=\"end\" align=\"middle\">\n      <Col>\n        <Typography.Text>With Decimals?</Typography.Text>\n      </Col>\n      <Col>\n        <Switch\n          checked={decimalized}\n          onChange={onSwitch}\n          checkedChildren={decimals}\n          unCheckedChildren={decimals}\n          disabled={!decimals}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Decimals\n","import { useSelector } from 'react-redux'\n\nimport { Row, Col, Card, Typography } from 'antd'\nimport Line from './line'\nimport Add from './add'\nimport Decimals from './decimals'\n\nimport { AppState } from 'model'\n\nconst Representor = () => {\n  const data = useSelector((state: AppState) => state.main.data)\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Decimals />\n      </Col>\n      <Col span={24}>\n        <Card bodyStyle={{ padding: 16, height: 384 }} className=\"scrollbar\">\n          <Row gutter={[8, 8]}>\n            {!data.length ? (\n              <Col span={24}>\n                <Typography.Text type=\"secondary\">No Data</Typography.Text>\n              </Col>\n            ) : null}\n            {data.map(([address, amount], i) => {\n              return (\n                <Col key={address + i} span={24}>\n                  <Line index={i} accountAddress={address} amount={amount} />\n                </Col>\n              )\n            })}\n            <Col span={24}>\n              <Add />\n            </Col>\n            <Col span={24} />\n          </Row>\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Representor\n","import { Row, Col, Typography, Card } from 'antd'\nimport IonIcon from '@sentre/antd-ionicon'\nimport Actions from './actions'\nimport Collector from './collector'\nimport MintSelection from './mintSelection'\nimport Representor from './representor'\n\nconst LIGHTNING_TUNNEL_URL =\n  'https://hub.sentre.io/lightning_tunnel?autoInstall=true'\n\nconst View = () => {\n  return (\n    <Row gutter={[24, 24]} justify=\"center\">\n      <Col span={24} style={{ maxWidth: 1200 }}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <Typography.Title level={3}>Solana Bulk Sender</Typography.Title>\n          </Col>\n          <Col xs={24} md={12}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Card\n                  onClick={() => window.open(LIGHTNING_TUNNEL_URL, '_blank')}\n                  hoverable\n                >\n                  <Typography.Text>\n                    <IonIcon name=\"information-circle-outline\" /> If you plan to\n                    do Airdrops (or Retroactives, Vesting, Distributions), we\n                    highly recommend{' '}\n                    <span style={{ color: '#328f62' }}>Lightning Tunnel</span>{' '}\n                    to effectively save transaction fees.\n                  </Typography.Text>\n                </Card>\n              </Col>\n              <Col span={24}>\n                <MintSelection />\n              </Col>\n              <Col span={24}>\n                <Collector />\n              </Col>\n            </Row>\n          </Col>\n          <Col xs={24} md={12}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Representor />\n              </Col>\n              <Col span={24}>\n                <Actions />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24} />\n    </Row>\n  )\n}\n\nexport default View\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    Buffer.isBuffer(val)\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'model/devTools'\n\nimport main from 'model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport { UIProvider, PoolProvider } from '@sentre/senhub'\n\nimport View from 'view'\n\nimport model from 'model'\nimport configs from 'configs'\nimport 'static/styles/light.less'\nimport 'static/styles/dark.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd={{ prefixCls: appId }}>\n      <PoolProvider>\n        <Provider store={model}>\n          <View />\n        </Provider>\n      </PoolProvider>\n    </UIProvider>\n  )\n}\n\nexport * from 'static.app'\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_logo","default","_README","_panel","_interopRequireDefault","require","_preview","obj","__esModule","panels","shared","appId","process","url","development","production","devnet","node","rpc","spltAddress","splataAddress","bulksenderAddress","fee","taxman","testnet","mainnet","manifest","env","sol","net","Status","NAME","initialState","mintAddress","data","decimalized","status","None","setData","createAsyncThunk","async","setMintAddress","setDecimalized","setStatus","createSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","payload","assign","TxError","Error","constructor","msg","txId","super","info","this","nodeUrl","errorMapping","connection","throwError","er","defaultError","instructionError","InstructionError","Custom","sendTransaction","tx","transaction","serialize","sendRawTransaction","skipPreflight","preflightCommitment","err","confirmTransaction","addRecentCommitment","blockhash","getLatestBlockhash","recentBlockhash","Connection","soproxABI","ErrorMapping","Tx","bulksenderProgramAddress","spltProgramAddress","splataProgramAddress","bulksenderProgramId","spltProgramId","splataProgramId","_splt","checkedTransfer","amount","dstAddress","wallet","account","payerAddress","getAddress","payerPublicKey","srcAssociatedAddress","deriveAssociatedAddress","dstAssociatedAddress","srcAssociatedPublicKey","dstPublicKey","dstAssociatedPublicKey","mintPublicKey","Transaction","layout","struct","key","type","code","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","programId","toBuffer","add","feePayer","signTransaction","buildCheckedBulkTransferTransaction","amounts","dstAddresses","taxmanAddress","simulating","length","num_txs","push","bulkTransferInstruction","feeInstruction","fromPubkey","toPubkey","PublicKey","lamports","simulateBulkTransfer","simulateTransaction","checkedBulkTransfer","SPLT","toBigInt","number","BigInt","configs","disabled","onChange","progress","setProgess","useState","bulk","setBulk","dispatch","useDispatch","useSelector","main","computeBulk","useCallback","sentre","window","Estimating","bulksender","Bulksender","currentData","newBulks","address","shift","simulatedBulk","util","ok","map","_","notify","description","flat","Estimated","useEffect","Button","icon","onClick","loading","block","Math","floor","merge","nextData","index","findIndex","addr","toString","setLoading","send","transferData","open","message","error","setError","accounts","useAccounts","walletAddress","useWalletAddress","useWalletBalance","decimals","useMintDecimals","useMemo","duplicated","filter","expectedIndex","expectedAddress","checkError","failedElements","Number","splt","accountAddress","balance","reduce","a","b","utils","Row","gutter","Col","span","Space","style","color","Typography","undefined","Sending","Done","includes","marginBottom","Upload","accept","beforeUpload","file","Promise","resolve","reject","Papa","skipEmptyLines","complete","parse","onRemove","maxCount","direction","size","align","level","DEFAULT_AVATARS","reversed","props","avatars","setAvatars","pools","usePool","deriveAvatar","token","tokenProvider","logoURI","deriveAvatars","poolData","values","find","mint_lpt","mint_a","mint_b","all","reverse","avatar","Avatar","src","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","buildResult","useAccountBalance","mint","DEFAULT_EMPTY_ADDRESS","setAccountAddress","useAccountBalanceByMintAddress","Card","Select","placeholder","width","format","duplicatedIndex","slice","warning","wrap","Tooltip","title","ellipsis","flex","splice","remove","Divider","margin","setAddress","setAmount","Input","e","target","InputNumber","val","stringMode","controls","force","justify","Switch","checked","checkedChildren","unCheckedChildren","bodyStyle","padding","height","className","maxWidth","xs","md","hoverable","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","Array","isArray","proto","getPrototypeOf","isPlainObject","BN","Buffer","isBuffer","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","prefixCls","PoolProvider","Provider","store","model"],"sourceRoot":""}