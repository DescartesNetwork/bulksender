{"version":3,"file":"static/js/32.ad3f2d76.chunk.js","mappings":"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","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","app/model/main.controller.tsx","app/lib/tx.ts","app/lib/index.ts","app/lib/utils.ts","app/view/actions/estimate.tsx","app/view/actions/merge.tsx","app/view/actions/send.tsx","app/view/actions/index.tsx","app/view/collector.tsx","shared/antd/mint/mintAvatar.tsx","shared/antd/mint/mintName.tsx","shared/antd/mint/mintSymbol.tsx","shared/antd/mint/mintSelection/useSearchedMintAddresses.ts","shared/hooks/useMintDecimals.ts","shared/hooks/useAccountBalance.ts","app/view/mintSelection.tsx","app/view/representor/line.tsx","shared/antd/numericInput.tsx","app/view/representor/add.tsx","app/view/representor/decimals.tsx","app/view/representor/index.tsx","app/view/index.tsx","app/model/index.ts","app/bootstrap.app.tsx","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/devTools.ts","shared/runtime.ts","shared/storage.ts","shared/util.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net, rpc } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n  bulksenderAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: 'FjkVzT6QJCQrgoZ8VoyAqysD5Mfa73ekpXWe9zDprWRA',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: rpc,\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '8WB9yeJ946594RHtxdNoKbwC2y13yCwJCtSY1mAeLWu1',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport type TransferData = Array<[string, string]>\nexport enum Status {\n  None,\n  Estimating,\n  Estimated,\n  Sending,\n  Done,\n}\nexport type State = {\n  mintAddress: string\n  data: TransferData /* address, amount */\n  decimalized: boolean\n  status: Status\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  mintAddress: '',\n  data: [],\n  decimalized: false,\n  status: Status.None,\n}\n\n/**\n * Actions\n */\n\nexport const setData = createAsyncThunk(\n  `${NAME}/setData`,\n  async (data: TransferData) => {\n    return { data, status: Status.None }\n  },\n)\n\nexport const setMintAddress = createAsyncThunk(\n  `${NAME}/setMintAddress`,\n  async (mintAddress: string) => {\n    return { mintAddress, status: Status.None }\n  },\n)\n\nexport const setDecimalized = createAsyncThunk(\n  `${NAME}/setDecimalized`,\n  async (decimalized: boolean) => {\n    return { decimalized, status: Status.None }\n  },\n)\n\nexport const setStatus = createAsyncThunk(\n  `${NAME}/setStatus`,\n  async (status: Status) => {\n    return { status }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setData.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setMintAddress.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setDecimalized.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setStatus.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Signature } from '@senswap/sen-js'\nimport { Connection, Transaction } from '@solana/web3.js'\n\nexport class TxError extends Error {\n  info: { txId: string }\n\n  constructor(msg: string, txId: string = '') {\n    super(msg)\n\n    this.name = `Error: ${msg}`\n    this.info = { txId }\n  }\n}\n\nclass Tx {\n  nodeUrl: string\n  connection: Connection\n  errorMapping: string[]\n\n  constructor(nodeUrl: string, errorMapping: string[] = []) {\n    this.nodeUrl = nodeUrl\n    this.errorMapping = errorMapping\n    this.connection = new Connection(this.nodeUrl, 'confirmed')\n  }\n\n  /**\n   * Build programmable error\n   * The method's precision os very relative, it's will parse wrong error in case of invoking programs\n   * @param er\n   * @param txId\n   * @returns\n   */\n  private throwError = (er: any, txId: string) => {\n    const defaultError = 'Transaction failed'\n    if (!er) throw new TxError(defaultError, txId)\n    const instructionError = er.InstructionError || []\n    if (typeof instructionError[1] == 'string')\n      throw new TxError(instructionError[1], txId)\n    const { Custom } = instructionError[1] || {}\n    if (typeof Custom !== 'number') throw new TxError(defaultError, txId)\n    throw new TxError(this.errorMapping[Custom] || defaultError, txId)\n  }\n\n  /**\n   * Broadcast a transaction to clusters and return the txId when it's confirmed\n   * @param transaction Signed transaction\n   * @returns transaction id\n   */\n  protected sendTransaction = async (\n    transaction: Transaction,\n  ): Promise<string> => {\n    const tx = transaction.serialize()\n    const txId = await this.connection.sendRawTransaction(tx, {\n      skipPreflight: true,\n      preflightCommitment: 'confirmed',\n    })\n    const {\n      value: { err },\n    } = await this.connection.confirmTransaction(txId, 'confirmed')\n    if (err) return this.throwError(err, txId)\n    return txId\n  }\n\n  /**\n   * Add transaction commitment\n   * @param transaction\n   * @returns transaction with added commitment\n   */\n  protected addRecentCommitment = async (\n    transaction: Transaction,\n  ): Promise<Transaction> => {\n    const { blockhash } = await this.connection.getRecentBlockhash('confirmed')\n    transaction.recentBlockhash = blockhash\n    return transaction\n  }\n\n  /**\n   * Add transaction signature\n   * @param transaction\n   * @param { publicKey, signature } signature\n   * @returns transaction with added signature\n   */\n  protected addSignature = (\n    transaction: Transaction,\n    { publicKey, signature }: Signature,\n  ): Transaction => {\n    if (!transaction.feePayer) transaction.feePayer = publicKey\n    transaction.addSignature(publicKey, signature)\n    return transaction\n  }\n}\n\nexport default Tx\n","import {\n  PublicKey,\n  Transaction,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from '@solana/web3.js'\nimport { SPLT, account, WalletInterface } from '@senswap/sen-js'\n\nimport Tx from './tx'\n\nconst soproxABI = require('soprox-abi')\n\nconst ErrorMapping = [\n  'Invalid instruction',\n  'Incorrect program id',\n  'Operation overflowed',\n  'Invalid owner',\n]\n\nclass Bulksender extends Tx {\n  readonly bulksenderProgramId: PublicKey\n  readonly spltProgramId: PublicKey\n  readonly splataProgramId: PublicKey\n  private _splt: SPLT\n\n  constructor(\n    bulksenderProgramAddress: string,\n    spltProgramAddress: string,\n    splataProgramAddress: string,\n    nodeUrl: string,\n  ) {\n    super(nodeUrl, ErrorMapping)\n\n    if (!account.isAddress(bulksenderProgramAddress))\n      throw new Error('Invalid bulksender program address')\n    if (!account.isAddress(spltProgramAddress))\n      throw new Error('Invalid SPL token program address')\n    if (!account.isAddress(splataProgramAddress))\n      throw new Error('Invalid SPL associated token program address')\n    this.bulksenderProgramId = account.fromAddress(bulksenderProgramAddress)\n    this.spltProgramId = account.fromAddress(spltProgramAddress)\n    this.splataProgramId = account.fromAddress(splataProgramAddress)\n\n    this._splt = new SPLT(spltProgramAddress, splataProgramAddress, nodeUrl)\n  }\n\n  /**\n   * Checked transfer\n   * @param amount Number of tokens\n   * @param dstAddress Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedTransfer = async (\n    amount: bigint,\n    dstAddress: string,\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Validation\n    if (!account.isAddress(dstAddress))\n      throw new Error('Invalid destination address')\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      dstAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const dstPublicKey = account.fromAddress(dstAddress)\n    const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'amount', type: 'u64' },\n      ],\n      { code: 0, amount },\n    )\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n        { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: dstPublicKey, isSigner: false, isWritable: false },\n        { pubkey: dstAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n      ],\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n\n  /**\n   * Build checkedBulkTransfer transaction\n   * @param amounts\n   * @param dstAddresses\n   * @param mintAddress\n   * @param wallet\n   * @returns\n   */\n  private buildCheckedBulkTransferTransaction = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<Transaction> => {\n    // Validation\n    for (const dstAddress of dstAddresses) {\n      if (!account.isAddress(dstAddress))\n        throw new Error(`Invalid destination address: ${dstAddress}`)\n    }\n    for (const amount of amounts) {\n      if (!amount) throw new Error(`Invalid amount: ${amount}`)\n    }\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    if (amounts.length !== dstAddresses.length)\n      throw new Error(\n        `The number of amounts and the number of addresses are unmatcher (${amounts.length}, ${dstAddresses.length})`,\n      )\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'num_txs', type: 'u32' },\n        { key: 'amounts', type: `[u64;${amounts.length}]` },\n      ],\n      { code: 1, num_txs: amounts.length, amounts },\n    )\n    let keys = [\n      { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n      { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n      { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n    ]\n    for (const dstAddress of dstAddresses) {\n      const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n        dstAddress,\n        mintAddress,\n      )\n      const dstPublicKey = account.fromAddress(dstAddress)\n      const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n      keys.push({ pubkey: dstPublicKey, isSigner: false, isWritable: false })\n      keys.push({\n        pubkey: dstAssociatedPublicKey,\n        isSigner: false,\n        isWritable: true,\n      })\n    }\n    const instruction = new TransactionInstruction({\n      keys,\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    return transaction\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Error\n   */\n  simulateBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<boolean> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Simulate the transaction\n    const {\n      value: { err },\n    } = await this.connection.simulateTransaction(transaction)\n    if (err) return false\n    return true\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n}\n\nexport default Bulksender\n","export const toBigInt = (number: string): bigint => {\n  try {\n    return BigInt(number)\n  } catch (er) {\n    return BigInt(0)\n  }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport configs from 'app/configs'\nimport { AppDispatch, AppState } from 'app/model'\nimport { asyncWait } from 'shared/util'\nimport { setStatus, Status, TransferData } from 'app/model/main.controller'\nimport Bulksender from 'app/lib'\nimport { toBigInt } from 'app/lib/utils'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node },\n} = configs\n\nexport type EstimateProps = {\n  onChange: (bulk: TransferData[]) => void\n  disabled?: boolean\n}\n\nconst Estimate = ({ disabled = false, onChange = () => {} }: EstimateProps) => {\n  const [progress, setProgess] = useState(0)\n  const [bulk, setBulk] = useState<TransferData[]>([])\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    main: { data, mintAddress, status },\n  } = useSelector((state: AppState) => state)\n\n  // Compute bulk\n  const computeBulk = useCallback(async () => {\n    const {\n      sentre: { wallet },\n    } = window\n    if (!wallet) return setBulk([])\n\n    await dispatch(setStatus(Status.Estimating))\n\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    let currentData = [...data]\n    const newBulks: TransferData[] = [[]]\n    while (currentData.length) {\n      const [address, amount] = currentData.shift() as [string, string]\n      const latestBulk = newBulks[newBulks.length - 1]\n      const simulatedBulk: TransferData = [...latestBulk, [address, amount]]\n      await asyncWait(250) // Avoid too many requests\n      let ok = false\n      try {\n        ok = await bulksender.simulateBulkTransfer(\n          simulatedBulk.map(([_, amount]) => toBigInt(amount)),\n          simulatedBulk.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n        )\n      } catch (er) {\n        ok = false\n      }\n      // There is a failed record\n      if (!ok && simulatedBulk.length <= 1) {\n        setBulk([])\n        window.notify({\n          type: 'error',\n          description:\n            'Cannot handle the transaction. Make sure that your SOL balance is enough to pay fees.',\n        })\n        return dispatch(setStatus(Status.None))\n      }\n      // Keep moving\n      if (ok) newBulks[newBulks.length - 1] = simulatedBulk\n      else newBulks.push([[address, amount]])\n      // Progress\n      setProgess(newBulks.flat().length / data.length)\n    }\n    setBulk(newBulks)\n    return dispatch(setStatus(Status.Estimated))\n  }, [data, dispatch, mintAddress])\n\n  useEffect(() => {\n    onChange(bulk)\n    return () => setProgess(0)\n  }, [bulk, onChange])\n\n  return (\n    <Button\n      type=\"primary\"\n      icon={<IonIcon name=\"send\" />}\n      onClick={computeBulk}\n      disabled={disabled}\n      loading={status === Status.Estimating}\n      block\n    >\n      Estimate {Math.floor(progress * 100)}%\n    </Button>\n  )\n}\n\nexport default Estimate\n","import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { AppState } from 'app/model'\nimport { TransferData, setData } from 'app/model/main.controller'\nimport { toBigInt } from 'app/lib/utils'\n\nexport type MergeProps = {\n  disabled?: boolean\n}\n\nconst Merge = ({ disabled = false }: MergeProps) => {\n  const dispatch = useDispatch()\n  const {\n    main: { data },\n  } = useSelector((state: AppState) => state)\n\n  // Merge duplicated addresses (must call when no error)\n  const merge = useCallback(async () => {\n    const nextData = [] as TransferData\n    for (const [address, amount] of data) {\n      const index = nextData.findIndex(([addr]) => addr === address)\n      if (index >= 0) {\n        nextData[index][1] = (\n          toBigInt(nextData[index][1]) + toBigInt(amount)\n        ).toString()\n      } else {\n        nextData.push([address, amount])\n      }\n    }\n    await dispatch(setData(nextData))\n  }, [data, dispatch])\n\n  return (\n    <Button\n      type=\"text\"\n      icon={<IonIcon name=\"git-merge-outline\" />}\n      onClick={merge}\n      disabled={disabled}\n      block\n    >\n      Merge\n    </Button>\n  )\n}\n\nexport default Merge\n","import { useCallback, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Button } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport configs from 'app/configs'\nimport { AppState } from 'app/model'\nimport { explorer } from 'shared/util'\nimport { TransferData } from 'app/model/main.controller'\nimport Bulksender from 'app/lib'\nimport { toBigInt } from 'app/lib/utils'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node },\n} = configs\n\nexport type SendProps = {\n  bulk: TransferData[]\n  disabled: boolean\n}\n\nconst Send = ({ bulk = [], disabled = false }: SendProps) => {\n  const [loading, setLoading] = useState(false)\n  const { mintAddress } = useSelector((state: AppState) => state.main)\n\n  // Send a bulk\n  const send = useCallback(async () => {\n    setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    for (const transferData of bulk) {\n      try {\n        const {\n          sentre: { wallet },\n        } = window\n        if (!wallet) return\n        const { txId } = await bulksender.checkedBulkTransfer(\n          transferData.map(([_, amount]) => toBigInt(amount)),\n          transferData.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n        )\n        window.notify({\n          type: 'success',\n          description: 'Successfully transfer tokens. Click to view details.',\n          onClick: () => window.open(explorer(txId), '_blank'),\n        })\n      } catch (er: any) {\n        window.notify({ type: 'error', description: er.message })\n      }\n    }\n    return setLoading(false)\n  }, [bulk, mintAddress])\n\n  return (\n    <Button\n      type=\"primary\"\n      icon={<IonIcon name=\"send\" />}\n      onClick={send}\n      disabled={disabled}\n      loading={loading}\n      block\n    >\n      Send\n    </Button>\n  )\n}\n\nexport default Send\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { account, AccountData } from '@senswap/sen-js'\nimport { useAccount, useWallet } from '@senhub/providers'\n\nimport { Row, Col, Typography, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport Estimate from './estimate'\nimport Merge from './merge'\nimport Send from './send'\n\nimport { AppState } from 'app/model'\nimport { Status, TransferData } from 'app/model/main.controller'\nimport { toBigInt } from 'app/lib/utils'\n\nconst Actions = () => {\n  const [error, setError] = useState<boolean | string>(false)\n  const [bulk, setBulk] = useState<Array<TransferData>>([])\n  const { data, mintAddress, status } = useSelector(\n    (state: AppState) => state.main,\n  )\n  const { accounts } = useAccount() as {\n    accounts: { [key: string]: AccountData }\n  }\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // Need to merge\n  const duplicated = useMemo(() => {\n    if (!data || !data.length) return false\n    const duplicatedElements = data.filter(([address], index) => {\n      const expectedIndex = data.findIndex(\n        ([expectedAddress]) => address === expectedAddress,\n      )\n      return expectedIndex !== index && expectedIndex > -1\n    })\n    if (duplicatedElements.length > 0) return true\n    return false\n  }, [data])\n\n  // Checked error\n  const checkError = useCallback(async () => {\n    // Check data length\n    if (!data || !data.length) return setError(true)\n    // Check wallet address\n    if (!account.isAddress(walletAddress))\n      return setError('Please connect your wallet')\n    if (!account.isAddress(mintAddress))\n      return setError('Please select a token to send')\n    // Check data contents\n    const failedElements = data.filter(([address, amount]) => {\n      if (!account.isAddress(address)) return true\n      if (!toBigInt(amount)) return true\n      return false\n    })\n    if (failedElements.length > 0) return setError(true)\n    // Check balance\n    const {\n      sentre: { splt },\n    } = window\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    const { amount: balance } = accounts[accountAddress] || {\n      amount: BigInt(0),\n    }\n    const amount = data.reduce((a, [_, b]) => a + toBigInt(b), BigInt(0))\n    if (balance < amount) return setError('Not enough token balance')\n    // No error\n    return setError(false)\n  }, [data, mintAddress, accounts, walletAddress])\n\n  useEffect(() => {\n    checkError()\n  }, [checkError])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        {typeof error === 'string' ? (\n          <Space>\n            <IonIcon\n              name=\"information-circle-outline\"\n              style={{ color: '#F2323F' }}\n            />\n            <Typography.Text type=\"danger\">{error}</Typography.Text>\n          </Space>\n        ) : (\n          <Space>\n            <IonIcon name=\"information-circle-outline\" />\n            <Typography.Text type={bulk.length ? undefined : 'secondary'}>\n              To send tokens to <strong>{data.length}</strong> address(es), you\n              will need to sign <strong>{bulk.length}</strong> time(s) with the\n              total estimated fee is ~{bulk.length * 0.005} SOL.\n            </Typography.Text>\n          </Space>\n        )}\n      </Col>\n      <Col span={12}>\n        <Merge\n          disabled={\n            !duplicated ||\n            !!error ||\n            [Status.Estimated, Status.Sending, Status.Done].includes(status)\n          }\n        />\n      </Col>\n      <Col span={12}>\n        {[Status.None, Status.Estimating].includes(status) ? (\n          <Estimate disabled={!!error} onChange={setBulk} />\n        ) : (\n          <Send bulk={bulk} disabled={!!error} />\n        )}\n      </Col>\n    </Row>\n  )\n}\n\nexport default Actions\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Papa from 'papaparse'\n\nimport { Row, Col, Upload, Space, Button, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport {\n  TransferData,\n  setData,\n  setDecimalized,\n} from 'app/model/main.controller'\n\nconst parse = (file: any): Promise<TransferData> => {\n  return new Promise((resolve, reject) => {\n    return Papa.parse(file, {\n      skipEmptyLines: true,\n      complete: ({ data }) => resolve(data as TransferData),\n    })\n  })\n}\n\nconst Collector = () => {\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const upload = async (file: any) => {\n    setLoading(true)\n    dispatch(setDecimalized(false))\n    dispatch(setData(await parse(file)))\n    setLoading(false)\n    return false\n  }\n  const remove = async () => {\n    setLoading(true)\n    dispatch(setData([]))\n    setLoading(false)\n    return true\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ marginBottom: 16 }}>\n        <Upload.Dragger\n          accept=\".csv,.txt\"\n          beforeUpload={upload}\n          onRemove={remove}\n          maxCount={1}\n        >\n          <Space direction=\"vertical\" size=\"large\" align=\"center\">\n            <Typography.Title level={3}>\n              Click or Drop file to upload\n            </Typography.Title>\n            <Typography.Text>\n              The accepted file types are <code>.csv</code>, <code>.txt</code>.\n            </Typography.Text>\n            <Button\n              type=\"primary\"\n              icon={<IonIcon name=\"cloud-upload-outline\" />}\n              loading={loading}\n            >\n              Upload\n            </Button>\n          </Space>\n        </Upload.Dragger>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Collector\n","import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nconst DEFAULT_AVATARS: Array<string | undefined> = [undefined]\n\nexport type MintAvatarProps = {\n  mintAddress: string\n  size?: number\n  icon?: ReactNode\n  reversed?: boolean\n}\n\n/**\n * Mint/Token avatar, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param size - Avatar size. Default 24px.\n * @param icon - Fallback icon for unknown token\n * @param reversed - (Optional) The default LP token avatar is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintAvatar = ({\n  mintAddress,\n  size = 24,\n  icon = <IonIcon name=\"diamond-outline\" />,\n  reversed = false,\n  ...props\n}: MintAvatarProps) => {\n  const [avatars, setAvatars] = useState(DEFAULT_AVATARS)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveAvatar = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.logoURI) return token.logoURI\n      return undefined\n    },\n    [tokenProvider],\n  )\n\n  const deriveAvatars = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setAvatars(DEFAULT_AVATARS)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const avatars = await Promise.all([mint_a, mint_b].map(deriveAvatar))\n      if (reversed) avatars.reverse()\n      return setAvatars(avatars)\n    }\n    // Normal mint\n    const avatar = await deriveAvatar(mintAddress)\n    return setAvatars([avatar])\n  }, [mintAddress, reversed, deriveAvatar, pools])\n\n  useEffect(() => {\n    deriveAvatars()\n  }, [deriveAvatars])\n\n  if (avatars.length === 1)\n    return (\n      <Avatar\n        src={avatars[0]}\n        size={size}\n        style={{ backgroundColor: '#2D3355', border: 'none' }}\n        {...props}\n      >\n        {icon}\n      </Avatar>\n    )\n  return (\n    <Avatar.Group style={{ display: 'block', whiteSpace: 'nowrap' }} {...props}>\n      {avatars.map((avatar, i) => (\n        <Avatar\n          key={i}\n          src={avatar}\n          size={size}\n          style={{ backgroundColor: '#2D3355', border: 'none' }}\n        >\n          {icon}\n        </Avatar>\n      ))}\n    </Avatar.Group>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_NAME = 'Unknown Token'\n\n/**\n * Mint/Token name, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the names is combined by 2 token names. The separator is to separate them.\n * @param reversed - (Optional) The default LP token names is A-B. The reversed is to change it to B-A\n * @returns name\n */\nconst MintName = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [name, setName] = useState(DEFAULT_NAME)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveName = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.name) return token.name\n      return DEFAULT_NAME\n    },\n    [tokenProvider],\n  )\n\n  const deriveNames = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setName(DEFAULT_NAME)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const names = await Promise.all([mint_a, mint_b].map(deriveName))\n      if (reversed) names.reverse()\n      return setName(`${names.join(separator)} LP`)\n    }\n    // Normal mint\n    const name = await deriveName(mintAddress)\n    return setName(name)\n  }, [mintAddress, reversed, deriveName, pools, separator])\n\n  useEffect(() => {\n    deriveNames()\n  }, [deriveNames])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { account } from '@senswap/sen-js'\nimport { useMint, usePool } from '@senhub/providers'\n\nconst DEFAULT_SYMBOL = 'TOKN'\n\n/**\n * Mint/Token symbol, supporting LP tokens\n * @param mintAddress -  Mint address\n * @param separator - (Optional) In case of LP tokens, the symbols is combined by 2 token symbols. The separator is to separate them.\n * @param reversed - (Optional) The default LP token symbol is A-B. The reversed is to change it to B-A\n * @returns symbol\n */\nconst MintSymbol = ({\n  mintAddress,\n  separator = ' • ',\n  reversed = false,\n}: {\n  mintAddress: string\n  separator?: string\n  reversed?: boolean\n}) => {\n  const [symbol, setSymbol] = useState(DEFAULT_SYMBOL)\n  const { tokenProvider } = useMint()\n  const { pools } = usePool()\n\n  const deriveSymbol = useCallback(\n    async (address: string) => {\n      const token = await tokenProvider.findByAddress(address)\n      if (token?.symbol) return token.symbol\n      return address.substring(0, 4)\n    },\n    [tokenProvider],\n  )\n\n  const deriveSymbols = useCallback(async () => {\n    if (!account.isAddress(mintAddress)) return setSymbol(DEFAULT_SYMBOL)\n    // LP mint\n    const poolData = Object.values(pools || {}).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const symbols = await Promise.all([mint_a, mint_b].map(deriveSymbol))\n      if (reversed) symbols.reverse()\n      return setSymbol(symbols.join(separator))\n    }\n    // Normal mint\n    const symbol = await deriveSymbol(mintAddress)\n    return setSymbol(symbol)\n  }, [mintAddress, reversed, deriveSymbol, pools, separator])\n\n  useEffect(() => {\n    deriveSymbols()\n  }, [deriveSymbols])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\nlet searching: NodeJS.Timeout\n\nexport const useSearchedMintAddresses = (keyword: string = '') => {\n  const [loading, setLoading] = useState(false)\n  const [searchedMintAddresses, setSearchedMintAddresses] = useState<\n    string[] | undefined\n  >()\n  const { tokenProvider } = useMint()\n\n  const getRecommendedMintAddresses = useCallback(async () => {\n    if (!keyword) {\n      setLoading(false)\n      return setSearchedMintAddresses(undefined)\n    }\n    if (searching) clearTimeout(searching)\n    setLoading(true)\n    searching = setTimeout(async () => {\n      const addresses = (await tokenProvider.find(keyword)).map(\n        ({ address }) => address,\n      )\n      setLoading(false)\n      return setSearchedMintAddresses(addresses)\n    }, 500)\n  }, [keyword, tokenProvider])\n\n  useEffect(() => {\n    getRecommendedMintAddresses()\n  }, [getRecommendedMintAddresses])\n\n  return { searchedMintAddresses, loading }\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useMint } from '@senhub/providers'\n\n/**\n * Get token decimals from multiple resources. This hook needs MintProvider for working.\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * @param mintAddress Mint address\n * @returns Decimals\n */\nconst useMintDecimals = (mintAddress: string) => {\n  const [decimals, setDecimals] = useState<number | undefined>(undefined)\n  const { getDecimals } = useMint()\n\n  const fetchDecimals = useCallback(async () => {\n    try {\n      const decimals = await getDecimals(mintAddress)\n      return setDecimals(decimals)\n    } catch (er: any) {\n      return setDecimals(undefined)\n    }\n  }, [mintAddress, getDecimals])\n\n  useEffect(() => {\n    fetchDecimals()\n  }, [fetchDecimals])\n\n  return decimals\n}\n\nexport default useMintDecimals\n","import { useEffect, useState } from 'react'\nimport { account, DEFAULT_EMPTY_ADDRESS, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet } from '@senhub/providers'\n\nimport useMintDecimals from './useMintDecimals'\n\nexport type AccountBalanceReturn = {\n  amount: bigint\n  decimals: number\n  balance: number\n  mintAddress: string\n}\n\nconst buildResult = (\n  mintAddress?: string,\n  amount?: bigint,\n  decimals?: number,\n) => {\n  if (\n    !account.isAddress(mintAddress) ||\n    amount === undefined ||\n    decimals === undefined\n  )\n    return { amount: BigInt(0), decimals: 0, balance: 0 }\n  return {\n    mintAddress,\n    amount,\n    decimals,\n    balance: Number(utils.undecimalize(amount, decimals)),\n  }\n}\n\n/**\n * Get account balance. This hook needs WalletProvider, MintProvider, and AccountProvider for working.\n * WalletProvider Ref: https://docs.sentre.io/senhub/development/providers/wallet-provider\n * MintProvider Ref: https://docs.sentre.io/senhub/development/providers/mint-provider\n * AccountProvider Ref: https://docs.sentre.io/senhub/development/providers/account-provider\n * @param accountAddress Associated account address\n * @returns AccountBalanceReturn\n * - AccountBalanceReturn.amount: The amount with decimals\n * - AccountBalanceReturn.decimals: The corresponding mint decimals\n * - AccountBalanceReturn.balance: The human-readable balance (undecimalized amount)\n * - AccountBalanceReturn.mintAddress: The corresponding mint\n */\nconst useAccountBalance = (accountAddress: string) => {\n  const {\n    wallet: { address: walletAddress, lamports },\n  } = useWallet()\n  const { accounts } = useAccount()\n  const { amount, mint: mintAddress } = accounts[accountAddress] || {}\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  if (!account.isAddress(walletAddress) || !account.isAddress(accountAddress))\n    return buildResult()\n  if (accountAddress === walletAddress)\n    return buildResult(DEFAULT_EMPTY_ADDRESS, lamports, 9)\n\n  return buildResult(mintAddress, amount, decimals)\n}\n\nexport default useAccountBalance\n\n/**\n * The same as useAccountBalance but the input is mint address\n * @param mintAddress Mint address\n * @returns AccountBalanceReturn\n */\nexport const useAccountBalanceByMintAddress = (mintAddress: string) => {\n  const [accountAddress, setAccountAddress] = useState('')\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const data = useAccountBalance(accountAddress)\n\n  useEffect(() => {\n    ;(async () => {\n      if (!account.isAddress(walletAddress) || !account.isAddress(mintAddress))\n        return setAccountAddress('')\n      const {\n        sentre: { splt },\n      } = window\n      try {\n        const address = await splt.deriveAssociatedAddress(\n          walletAddress,\n          mintAddress,\n        )\n        return setAccountAddress(address)\n      } catch (er) {\n        return setAccountAddress('')\n      }\n    })()\n  })\n\n  return data\n}\n","import { useDispatch, useSelector } from 'react-redux'\nimport { useAccount } from '@senhub/providers'\n\nimport { Row, Col, Select, Space, Typography, Card } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'shared/antd/mint'\n\nimport { AppState } from 'app/model'\nimport { setMintAddress } from 'app/model/main.controller'\nimport { numeric } from 'shared/util'\nimport { useAccountBalanceByMintAddress } from 'shared/hooks/useAccountBalance'\n\nconst MintSelection = () => {\n  const dispatch = useDispatch()\n  const {\n    main: { mintAddress },\n  } = useSelector((state: AppState) => state)\n  const { accounts } = useAccount()\n  const { balance } = useAccountBalanceByMintAddress(mintAddress)\n\n  return (\n    <Card>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Select\n            size=\"large\"\n            placeholder=\"Select token\"\n            style={{ width: '100%' }}\n            onChange={(mintAddress: string) =>\n              dispatch(setMintAddress(mintAddress))\n            }\n          >\n            {Object.values(accounts).map(({ mint: mintAddress }, i) => (\n              <Select.Option key={i} value={mintAddress}>\n                <Space align=\"center\">\n                  <MintAvatar mintAddress={mintAddress} />\n                  <Typography.Text type=\"secondary\">\n                    <MintSymbol mintAddress={mintAddress} />\n                  </Typography.Text>\n                  <Typography.Text>\n                    <MintName mintAddress={mintAddress} />\n                  </Typography.Text>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={24}>\n          <Space>\n            <Typography.Text type=\"secondary\">Balance:</Typography.Text>\n            <Typography.Text>\n              {numeric(balance).format('0,0.[0000]')}\n            </Typography.Text>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintSelection\n","import { useDispatch, useSelector } from 'react-redux'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Button, Typography, Tooltip, Divider, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { MintSymbol } from 'shared/antd/mint'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { setData } from 'app/model/main.controller'\nimport { toBigInt } from 'app/lib/utils'\n\nexport type LineProps = {\n  index: number\n  accountAddress: string\n  amount: string\n}\n\nconst Line = ({ index, accountAddress, amount }: LineProps) => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    main: { data, mintAddress },\n  } = useSelector((state: AppState) => state)\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  const remove = (index: number) => {\n    const nextData = [...data]\n    nextData.splice(index, 1)\n    return dispatch(setData(nextData))\n  }\n\n  const error = !account.isAddress(accountAddress)\n    ? 'Invalid address'\n    : !toBigInt(amount)\n    ? 'Invalid amount'\n    : ''\n  const duplicatedIndex = data\n    .slice(0, index)\n    .findIndex(([address]) => address === accountAddress)\n  const warning =\n    duplicatedIndex >= 0 ? `Duplicated address to #${duplicatedIndex}` : ''\n\n  const display = !toBigInt(amount)\n    ? amount\n    : utils.undecimalize(toBigInt(amount), decimals)\n\n  return (\n    <Row gutter={[16, 8]}>\n      <Col span={24}>\n        <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n          <Col>\n            <Typography.Text type=\"secondary\">#{index + 1}</Typography.Text>\n          </Col>\n          <Col span={12}>\n            <Tooltip title={accountAddress}>\n              <Typography.Text ellipsis>{accountAddress}</Typography.Text>\n            </Tooltip>\n          </Col>\n          <Col flex=\"auto\">\n            <Space>\n              <Typography.Text>{display}</Typography.Text>\n              <Typography.Text>\n                <MintSymbol mintAddress={mintAddress} />\n              </Typography.Text>\n            </Space>\n          </Col>\n          <Col>\n            <Space align=\"center\">\n              {warning ? (\n                <Tooltip title={warning}>\n                  <IonIcon\n                    name=\"alert-circle-outline\"\n                    style={{ color: '#FCB017' }}\n                  />\n                </Tooltip>\n              ) : null}\n              {error ? (\n                <Tooltip title={error}>\n                  <IonIcon\n                    name=\"warning-outline\"\n                    style={{ color: '#F2323F' }}\n                  />\n                </Tooltip>\n              ) : null}\n              <Button\n                type=\"text\"\n                icon={<IonIcon name=\"trash-outline\" />}\n                onClick={() => remove(index)}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Line\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on the max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n\n    // Handle cursor jumping\n    // To prevent autofocus on mobile, we must strictly check cursor different from null\n    if (cursor !== null) innerRef?.current?.setSelectionRange(cursor, cursor)\n\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { ChangeEvent, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, utils } from '@senswap/sen-js'\n\nimport { Row, Col, Button, Input } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport { setData } from 'app/model/main.controller'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\n\nconst Add = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const [address, setAddress] = useState('')\n  const [amount, setAmount] = useState('')\n  const {\n    main: { data, mintAddress },\n  } = useSelector((state: AppState) => state)\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  const onAddress = (e: ChangeEvent<HTMLInputElement>) =>\n    setAddress(e.target.value)\n  const onAmount = (val: string) => setAmount(val)\n\n  const add = async () => {\n    if (!account.isAddress(address))\n      return window.notify({ type: 'warning', description: 'Invalid address' })\n    if (!Number(amount))\n      return window.notify({ type: 'warning', description: 'Invalid amount' })\n    const nextData = [...data]\n    nextData.push([address, utils.decimalize(amount, decimals).toString()])\n    await dispatch(setData(nextData))\n    await setAddress('')\n    await setAmount('')\n  }\n\n  return (\n    <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n      <Col span={12}>\n        <Input placeholder=\"Address\" value={address} onChange={onAddress} />\n      </Col>\n      <Col flex=\"auto\">\n        <NumericInput placeholder=\"Amount\" value={amount} onValue={onAmount} />\n      </Col>\n      <Col>\n        <Button\n          type=\"primary\"\n          icon={<IonIcon name=\"add-outline\" />}\n          onClick={add}\n          disabled={!account.isAddress(mintAddress)}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Add\n","import { useDispatch, useSelector } from 'react-redux'\nimport { utils } from '@senswap/sen-js'\n\nimport { Col, Row, Switch, Typography } from 'antd'\n\nimport { AppDispatch, AppState } from 'app/model'\nimport {\n  setData,\n  setDecimalized,\n  TransferData,\n} from 'app/model/main.controller'\nimport useMintDecimals from 'shared/hooks/useMintDecimals'\nimport { toBigInt } from 'app/lib/utils'\n\nconst Decimals = () => {\n  const dispatch = useDispatch<AppDispatch>()\n  const {\n    main: { data, decimalized, mintAddress },\n  } = useSelector((state: AppState) => state)\n  const decimals = useMintDecimals(mintAddress) || 0\n\n  const onSwitch = async (checked: boolean) => {\n    const nextData: TransferData = data.map(([address, amount]) => {\n      const newAmount = checked\n        ? utils.decimalize(amount, decimals).toString()\n        : utils.undecimalize(toBigInt(amount), decimals)\n      return [address, newAmount]\n    })\n    await dispatch(setDecimalized(checked))\n    await dispatch(setData(nextData))\n  }\n\n  return (\n    <Row gutter={[8, 8]} justify=\"end\" align=\"middle\">\n      <Col>\n        <Typography.Text>Decimals?</Typography.Text>\n      </Col>\n      <Col>\n        <Switch\n          checked={decimalized}\n          onChange={onSwitch}\n          checkedChildren={decimals}\n          unCheckedChildren={decimals}\n          disabled={!decimals}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Decimals\n","import { useSelector } from 'react-redux'\n\nimport { Row, Col, Card, Typography } from 'antd'\nimport Line from './line'\nimport Add from './add'\nimport Decimals from './decimals'\n\nimport { AppState } from 'app/model'\n\nconst Representor = () => {\n  const {\n    main: { data },\n  } = useSelector((state: AppState) => state)\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Decimals />\n      </Col>\n      <Col span={24}>\n        <Card bodyStyle={{ padding: 16, height: 384 }} className=\"scrollbar\">\n          <Row gutter={[8, 8]}>\n            {!data.length ? (\n              <Col span={24}>\n                <Typography.Text type=\"secondary\">No Data</Typography.Text>\n              </Col>\n            ) : null}\n            {data.map(([address, amount], i) => {\n              return (\n                <Col key={address + i} span={24}>\n                  <Line index={i} accountAddress={address} amount={amount} />\n                </Col>\n              )\n            })}\n            <Col span={24}>\n              <Add />\n            </Col>\n            <Col span={24} />\n          </Row>\n        </Card>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Representor\n","import { Row, Col, Typography } from 'antd'\nimport Actions from './actions'\nimport Collector from './collector'\nimport MintSelection from './mintSelection'\nimport Representor from './representor'\n\nconst View = () => {\n  return (\n    <Row gutter={[24, 24]} justify=\"center\">\n      <Col span={24} style={{ maxWidth: 1200 }}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <Typography.Title level={3}>Solana Bulk Sender</Typography.Title>\n          </Col>\n          <Col xs={{ span: 24 }} md={{ span: 12 }}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <MintSelection />\n              </Col>\n              <Col span={24}>\n                <Collector />\n              </Col>\n            </Row>\n          </Col>\n          <Col xs={{ span: 24 }} md={{ span: 12 }}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Representor />\n              </Col>\n              <Col span={24}>\n                <Actions />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24} />\n    </Row>\n  )\n}\n\nexport default View\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools(process.env.REACT_APP_ID as string),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  UIProvider,\n  WalletProvider,\n  AccountProvider,\n  MintProvider,\n  PoolProvider,\n} from '@senhub/providers'\n\nimport View from 'app/view'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/dark.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd={{ prefixCls: appId }}>\n      <WalletProvider>\n        <AccountProvider>\n          <MintProvider>\n            <PoolProvider>\n              <Provider store={model}>\n                <View />\n              </Provider>\n            </PoolProvider>\n          </MintProvider>\n        </AccountProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { PublicKey } from '@solana/web3.js'\nimport BN from 'bn.js'\n\n// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint' ||\n    val instanceof PublicKey ||\n    val instanceof BN ||\n    val instanceof Buffer\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { Connection } from '@solana/web3.js'\nimport storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n\n/**\n * Chain ID\n */\nconst getChainId = () => {\n  switch (net) {\n    case 'devnet':\n      return 103\n    case 'testnet':\n      return 102\n    case 'mainnet':\n      return 101\n    default:\n      return 101\n  }\n}\nexport type ChainId = 101 | 102 | 103\nexport const chainId: ChainId = getChainId()\n\n/**\n * RPC Node\n */\nconst CLUSTERS: Record<Net, string[]> = {\n  devnet: [\n    'https://api.devnet.solana.com',\n    'https://psytrbhymqlkfrhudd.dev.genesysgo.net:8899/',\n  ],\n  testnet: ['https://api.testnet.solana.com'],\n  mainnet: [\n    'https://ssc-dao.genesysgo.net/',\n    'https://solana-api.projectserum.com',\n    'https://solitary-autumn-water.solana-mainnet.quiknode.pro/dcbac9d444818a20ac583541dec35b44c6840888/',\n  ],\n}\nconst getRPC = () => {\n  const rpcs = CLUSTERS[net]\n  const rpc = rpcs[Math.floor(Math.random() * rpcs.length)]\n  console.log('Debug OS RPC:', rpc)\n  return rpc\n}\nexport const rpc: string = getRPC()\n\n/**\n * Ping Solana cluster\n * @param nodeRpc - Solana's RPC cluster\n * @returns ping time\n */\nexport const pingCluster = async (nodeRpc: string): Promise<number> => {\n  const connection = new Connection(nodeRpc)\n  const start = Date.now()\n  await connection.getVersion()\n  const end = Date.now()\n  return end - start\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  try {\n    if (!value) return null\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\n/**\n * Randomly choose an element in the input array\n * @param arr - Original array of elements\n * @returns\n */\nexport const randChoose = <T>(arr: T[]): T => {\n  const rand = Math.floor(Math.random() * arr.length)\n  return arr[rand]\n}\n\n/**\n * Randomize a subarray in the input array with a specific number of elements\n * @param arr - Original array of elements\n * @param num - Number of elements in randomized subarray\n * @returns\n */\nexport const randElements = <T>(arr: T[], num: number): T[] => {\n  if (arr.length < num) return [...arr]\n  const re: T[] = []\n  while (re.length < num) {\n    const el = randChoose(arr)\n    if (!re.includes(el)) re.push(el)\n  }\n  return re\n}\n"],"names":["CUSTOM_ICONS","forwardRef","ref","name","className","props","cln","src","shared","appId","process","url","development","staging","production","devnet","node","rpc","spltAddress","splataAddress","bulksenderAddress","testnet","mainnet","manifest","env","sol","net","Status","NAME","initialState","mintAddress","data","decimalized","status","None","setData","createAsyncThunk","async","setMintAddress","setDecimalized","setStatus","createSlice","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","TxError","Error","constructor","msg","txId","super","info","this","nodeUrl","errorMapping","connection","throwError","er","defaultError","instructionError","InstructionError","Custom","sendTransaction","tx","transaction","serialize","sendRawTransaction","skipPreflight","preflightCommitment","value","err","confirmTransaction","addRecentCommitment","blockhash","getRecentBlockhash","recentBlockhash","addSignature","publicKey","signature","feePayer","Connection","soproxABI","require","ErrorMapping","Tx","bulksenderProgramAddress","spltProgramAddress","splataProgramAddress","bulksenderProgramId","spltProgramId","splataProgramId","_splt","checkedTransfer","amount","dstAddress","wallet","account","payerAddress","getAddress","payerPublicKey","srcAssociatedAddress","deriveAssociatedAddress","dstAssociatedAddress","srcAssociatedPublicKey","dstPublicKey","dstAssociatedPublicKey","mintPublicKey","Transaction","layout","struct","key","type","code","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","programId","toBuffer","add","payerSig","rawSignTransaction","buildCheckedBulkTransferTransaction","amounts","dstAddresses","length","num_txs","push","simulateBulkTransfer","simulateTransaction","checkedBulkTransfer","SPLT","toBigInt","number","BigInt","configs","disabled","onChange","progress","setProgess","useState","bulk","setBulk","dispatch","useDispatch","main","useSelector","computeBulk","useCallback","sentre","window","Estimating","bulksender","Bulksender","currentData","newBulks","address","shift","simulatedBulk","asyncWait","ok","map","_","notify","description","flat","Estimated","useEffect","Button","icon","onClick","loading","block","Math","floor","merge","nextData","index","findIndex","addr","toString","setLoading","send","transferData","open","explorer","message","error","setError","accounts","useAccount","walletAddress","useWallet","duplicated","useMemo","filter","expectedIndex","expectedAddress","checkError","failedElements","splt","accountAddress","balance","reduce","a","b","Row","gutter","Col","span","Space","style","color","Typography","undefined","Sending","Done","includes","marginBottom","Upload","accept","beforeUpload","file","Promise","resolve","reject","Papa","skipEmptyLines","complete","parse","onRemove","maxCount","direction","size","align","level","DEFAULT_AVATARS","reversed","avatars","setAvatars","tokenProvider","useMint","pools","usePool","deriveAvatar","token","findByAddress","logoURI","deriveAvatars","poolData","values","find","mint_lpt","mint_a","mint_b","all","reverse","avatar","Avatar","backgroundColor","border","display","whiteSpace","i","DEFAULT_NAME","separator","setName","deriveName","deriveNames","names","join","DEFAULT_SYMBOL","symbol","setSymbol","deriveSymbol","substring","deriveSymbols","symbols","decimals","setDecimals","getDecimals","fetchDecimals","buildResult","Number","utils","useAccountBalance","lamports","mint","useMintDecimals","DEFAULT_EMPTY_ADDRESS","setAccountAddress","useAccountBalanceByMintAddress","Card","Select","placeholder","width","numeric","format","duplicatedIndex","slice","warning","wrap","Tooltip","title","ellipsis","flex","splice","remove","Divider","margin","timeoutId","max","onValue","cursor","setCursor","innerRef","useRef","onAmount","val","onError","clearTimeout","setTimeout","test","parseFloat","current","setSelectionRange","visible","Input","e","target","selectionStart","setAddress","setAmount","justify","Switch","checked","checkedChildren","unCheckedChildren","bodyStyle","padding","height","maxWidth","xs","md","configureStore","middleware","getDefaultMiddleware","bigintSerializationMiddleware","devTools","reducer","Page","UIProvider","antd","prefixCls","WalletProvider","AccountProvider","MintProvider","PoolProvider","Provider","store","model","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","resolveQueue","rejectQueue","resolves","rejects","SingleFlightCache","mapCache","set","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","cacheData","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","appName","prototype","toJSON","serializableCheck","isSerializable","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","PublicKey","BN","Buffer","storage","getNetwork","chainId","getChainId","CLUSTERS","rpcs","random","console","log","getRPC","KEY","driver","localStorage","convert","getItem","setItem","clear","ms","addressOrTxId","numbro"],"sourceRoot":""}