{"version":3,"file":"static/js/736.396c24de.chunk.js","mappings":"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","sources":["shared/antd/ionicon/assets/icon-telegram.svg","shared/antd/ionicon/customs.tsx","shared/antd/ionicon/index.tsx","app/configs/manifest.config.ts","app/configs/sol.config.ts","app/configs/index.ts","shared/dataloader/constant.ts","shared/dataloader/request.ts","shared/dataloader/cache.ts","shared/dataloader/index.ts","shared/util.ts","app/model/main.controller.tsx","app/lib/tx.ts","app/lib/index.ts","app/page/action.tsx","app/page/collector.tsx","app/components/mint/mintAvatar.tsx","app/components/mint/mintName.tsx","app/components/mint/mintSymbol.tsx","app/page/mintSelection.tsx","shared/antd/numericInput.tsx","app/page/representor.tsx","app/page/index.tsx","app/widget/index.tsx","shared/devTools.ts","app/model/index.ts","app/bootstrap.app.tsx","shared/runtime.ts","shared/storage.ts"],"sourcesContent":["var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgIconTelegram({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"inherit\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 50 50\",\n    width: \"50px\",\n    height: \"50px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M46.137,6.552c-0.75-0.636-1.928-0.727-3.146-0.238l-0.002,0C41.708,6.828,6.728,21.832,5.304,22.445 c-0.259,0.09-2.521,0.934-2.288,2.814c0.208,1.695,2.026,2.397,2.248,2.478l8.893,3.045c0.59,1.964,2.765,9.21,3.246,10.758 c0.3,0.965,0.789,2.233,1.646,2.494c0.752,0.29,1.5,0.025,1.984-0.355l5.437-5.043l8.777,6.845l0.209,0.125 c0.596,0.264,1.167,0.396,1.712,0.396c0.421,0,0.825-0.079,1.211-0.237c1.315-0.54,1.841-1.793,1.896-1.935l6.556-34.077 C47.231,7.933,46.675,7.007,46.137,6.552z M22,32l-3,8l-3-10l23-17L22,32z\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconTelegram);\nexport default __webpack_public_path__ + \"static/media/icon-telegram.2450489f40d03000fe65fc1c6f238d85.svg\";\nexport { ForwardRef as ReactComponent };","import IconTele from './assets/icon-telegram.svg'\n\nexport const CUSTOM_ICONS: Record<string, string> = {\n  'logo-telegram': IconTele,\n}\n","/**\n * IonIcon 5\n * Credit https://ionic.io/ionicons\n */\n\nimport { forwardRef } from 'react'\nimport { CUSTOM_ICONS } from './customs'\n\n/**\n * IonIcon\n * @param name The icon name. You can find it here https://ionic.io/ionicons\n * @param className To modify the span class\n */\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n\n  return (\n    <span className={cln} {...props}>\n      {CUSTOM_ICONS[name] ? (\n        <ion-icon ref={ref} src={CUSTOM_ICONS[name]} />\n      ) : (\n        <ion-icon ref={ref} name={name} />\n      )}\n    </span>\n  )\n})\n\nexport default IonIcon\n","import { Env } from 'shared/runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { Net } from 'shared/runtime'\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  spltAddress: string\n  splataAddress: string\n  bulksenderAddress: string\n}\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    node: 'https://api.devnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: 'FjkVzT6QJCQrgoZ8VoyAqysD5Mfa73ekpXWe9zDprWRA',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    node: 'https://api.testnet.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    node: 'https://api.mainnet-beta.solana.com',\n    spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n    splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n    bulksenderAddress: '',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import { env, net } from 'shared/runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","export type LimitConfig = {\n  calls: number\n  time: number\n}\n\nexport type CacheConfig = {\n  ttl: number // millisecond\n}\n\nexport type SingleFlightConfig = {\n  limit?: LimitConfig\n  cache?: CacheConfig\n}\n\n// 10 request per 1 second\nexport const DEFAULT_LIMIT_CONFIG: LimitConfig = {\n  calls: 10,\n  time: 1000,\n}\n\n// 10 request per 1 second\nexport const DEFAULT_CACHE_CONFIG: CacheConfig = {\n  ttl: 30000,\n}\n\nexport const DEFAULT_SINGLE_FLIGHT_CONFIG: SingleFlightConfig = {\n  limit : DEFAULT_LIMIT_CONFIG,\n  cache: DEFAULT_CACHE_CONFIG\n}","export interface IRequestQueue {\n  key: string\n  add(resolve: any, reject: any): void\n  resolves(data: any): void\n  rejects(error: any): void\n}\n\nexport class RequestQueue implements IRequestQueue {\n  key = ''\n  private resolveQueue: any[] = []\n  private rejectQueue: any[] = []\n  constructor(key: string) {\n    this.key = key\n  }\n\n  add(resolve: any, reject: any) {\n    this.resolveQueue.push(resolve)\n    this.rejectQueue.push(reject)\n  }\n\n  resolves(data: any) {\n    while (this.resolveQueue.length > 0) {\n      const resolve = this.resolveQueue.shift()\n      resolve(data)\n    }\n  }\n\n  rejects(error: any) {\n    while (this.rejectQueue.length > 0) {\n      const reject = this.rejectQueue.shift()\n      reject(error)\n    }\n  }\n}\n","import { DEFAULT_CACHE_CONFIG } from './constant'\nimport { CacheConfig } from './constant'\n\nexport class SingleFlightCache {\n  private static mapCache = new Map<string, any>()\n\n  static set(\n    key: string,\n    value: any,\n    configs: CacheConfig = DEFAULT_CACHE_CONFIG,\n  ) {\n    this.mapCache.set(key, value)\n    setTimeout(() => {\n      this.mapCache.delete(key)\n    }, configs.ttl)\n  }\n\n  static get(key: string) {\n    return this.mapCache.get(key)\n  }\n}\n","import { DEFAULT_SINGLE_FLIGHT_CONFIG, SingleFlightConfig } from './constant'\n\nimport { IRequestQueue, RequestQueue } from './request'\nimport { SingleFlightCache } from './cache'\n\nexport class DataLoader {\n  static mapInstance = new Map<string, SingleFlight>()\n\n  private static getSingleFlight(configs: SingleFlightConfig): SingleFlight {\n    const instanceKey = JSON.stringify(configs)\n    if (this.mapInstance.has(instanceKey)) {\n      const instance = this.mapInstance.get(instanceKey)\n      if (instance) return instance\n    }\n\n    let newSingleFlight = new SingleFlight(configs)\n    this.mapInstance.set(instanceKey, newSingleFlight)\n    return newSingleFlight\n  }\n\n  static async load<T>(\n    requestKey: string | object,\n    callback: () => Promise<T>,\n    configs: SingleFlightConfig = {},\n  ): Promise<T> {\n    if (typeof requestKey === 'object') requestKey = JSON.stringify(requestKey)\n\n    let singleFlight = DataLoader.getSingleFlight(configs)\n    DataLoader.mapInstance.set(requestKey, singleFlight)\n    const newRequest = new RequestQueue(requestKey)\n    return singleFlight.load<T>(newRequest, callback)\n  }\n}\n\nclass SingleFlight {\n  private config: SingleFlightConfig\n  private intervalRequest: any\n  private timeLogs: number[] = []\n\n  private mapRequestCalling = new Map<string, IRequestQueue>()\n  private requestQueue: IRequestQueue[] = []\n\n  constructor(configs: SingleFlightConfig) {\n    this.config = Object.assign(DEFAULT_SINGLE_FLIGHT_CONFIG, configs)\n  }\n\n  async load<T>(newRequest: IRequestQueue, callback: () => Promise<T>) {\n    const cacheData = SingleFlightCache.get(newRequest.key)\n    if (cacheData) return Promise.resolve(cacheData)\n\n    let isFetch = false\n    let request = this.mapRequestCalling.get(newRequest.key)\n    if (!request) {\n      request = newRequest\n      isFetch = true\n      this.mapRequestCalling.set(request.key, request)\n    }\n\n    return new Promise((resolve, reject) => {\n      if (!request) return reject('Not found request!')\n      request.add(resolve, reject)\n      if (isFetch) {\n        this.fetch<T>(request, callback)\n      }\n    })\n  }\n\n  private fetch<T>(request: IRequestQueue, callback: () => Promise<T>) {\n    if (!this.validateLimit()) {\n      return this.addRequestQueue(request, callback)\n    }\n    this.createTimeLogs()\n\n    callback()\n      .then((response) => {\n        SingleFlightCache.set(request.key, response, this.config.cache)\n        request.resolves(response)\n      })\n      .catch((error) => {\n        request.rejects(error)\n      })\n      .finally(() => {\n        this.mapRequestCalling.delete(request.key)\n        this.fetchRequestQueue(callback)\n      })\n  }\n\n  private fetchRequestQueue(callback: () => Promise<any>) {\n    if (!this.validateLimit()) return\n    const request = this.requestQueue.shift()\n    if (request) this.load(request, callback)\n\n    if (this.requestQueue.length === 0 && this.intervalRequest) {\n      clearInterval(this.intervalRequest)\n    }\n  }\n\n  private addRequestQueue(\n    request: IRequestQueue,\n    callback: () => Promise<any>,\n  ) {\n    this.requestQueue.push(request)\n    this.intervalRequest = setInterval(() => {\n      this.fetchRequestQueue(callback)\n    }, this.config.limit?.time)\n  }\n\n  private validateLimit(): boolean {\n    return true\n  }\n\n  private createTimeLogs() {\n    if (!this.config.limit) return\n\n    const now = new Date().getTime()\n    this.timeLogs.push(now)\n    if (this.timeLogs.length > this.config.limit?.calls) {\n      this.timeLogs.shift()\n    }\n  }\n}\n","import { account, utils } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport { net } from 'shared/runtime'\nimport { DataLoader } from './dataloader'\n\n/**\n * Delay by async/await\n * @param ms - milisenconds\n * @returns\n */\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\n/**\n * Shorten a long address\n * @param address - The long address\n * @param num - The number of the heading and trailing characters\n * @param delimiter - The delimiter\n * @returns Shortened address\n */\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\n/**\n * Build a explorer url by context including addresses or transaction ids\n * @param addressOrTxId - Address or TxId\n * @returns\n */\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\n/**\n * Wrapped Numbro - https://numbrojs.com/old-format.html\n * @param value - value\n * @returns\n */\nexport const numeric = (\n  value?: number | string | BigInt,\n): ReturnType<typeof numbro> => {\n  if (!value) return numbro('0')\n  return numbro(value)\n}\n\n/**\n * Generate a random color\n * @param seed - Seed\n * @param opacity - Opacity\n * @returns\n */\nexport const randomColor = (seed?: string, opacity?: string | number) => {\n  let hash = Math.floor(Math.random() * 16777215)\n  if (seed) {\n    hash = 0\n    for (let i = 0; i < seed.length; i++) {\n      hash = seed.charCodeAt(i) + ((hash << 5) - hash)\n    }\n  }\n  var rgb = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 255\n    rgb[i] = value\n  }\n  return `rgba(${rgb[0]}, 100, ${rgb[1]},${opacity || 1})`\n}\n\n/**\n * Fetch coingecko data with cache\n * @param ticket - Token ticket\n * @returns\n */\nexport const fetchCGK = async (ticket = '') => {\n  return DataLoader.load('fetchCGK' + ticket, () => utils.parseCGK(ticket))\n}\n\nexport const toBigInt = (number: string): bigint => {\n  try {\n    return BigInt(number)\n  } catch (er) {\n    return BigInt(0)\n  }\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport type TransferData = Array<[string, string]>\nexport type State = {\n  mintAddress: string\n  data: TransferData /* address, amount */\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  mintAddress: '',\n  data: [],\n}\n\n/**\n * Actions\n */\n\nexport const setData = createAsyncThunk(\n  `${NAME}/setData`,\n  async (data: TransferData) => {\n    return { data }\n  },\n)\n\nexport const setMintAddress = createAsyncThunk(\n  `${NAME}/setMintAddress`,\n  async (mintAddress: string) => {\n    return { mintAddress }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setData.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setMintAddress.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Signature } from '@senswap/sen-js'\nimport { Connection, Transaction } from '@solana/web3.js'\n\nexport class TxError extends Error {\n  info: { txId: string }\n\n  constructor(msg: string, txId: string = '') {\n    super(msg)\n\n    this.name = `Error: ${msg}`\n    this.info = { txId }\n  }\n}\n\nclass Tx {\n  nodeUrl: string\n  connection: Connection\n  errorMapping: string[]\n\n  constructor(nodeUrl: string, errorMapping: string[] = []) {\n    this.nodeUrl = nodeUrl\n    this.errorMapping = errorMapping\n    this.connection = new Connection(this.nodeUrl, 'confirmed')\n  }\n\n  /**\n   * Build programmable error\n   * The method's precision os very relative, it's will parse wrong error in case of invoking programs\n   * @param er\n   * @param txId\n   * @returns\n   */\n  private throwError = (er: any, txId: string) => {\n    const defaultError = 'Transaction failed'\n    if (!er) throw new TxError(defaultError, txId)\n    const instructionError = er.InstructionError || []\n    if (typeof instructionError[1] == 'string')\n      throw new TxError(instructionError[1], txId)\n    const { Custom } = instructionError[1] || {}\n    if (typeof Custom !== 'number') throw new TxError(defaultError, txId)\n    throw new TxError(this.errorMapping[Custom] || defaultError, txId)\n  }\n\n  /**\n   * Broadcast a transaction to clusters and return the txId when it's confirmed\n   * @param transaction Signed transaction\n   * @returns transaction id\n   */\n  protected sendTransaction = async (\n    transaction: Transaction,\n  ): Promise<string> => {\n    const tx = transaction.serialize()\n    const txId = await this.connection.sendRawTransaction(tx, {\n      skipPreflight: true,\n      preflightCommitment: 'confirmed',\n    })\n    const {\n      value: { err },\n    } = await this.connection.confirmTransaction(txId, 'confirmed')\n    if (err) return this.throwError(err, txId)\n    return txId\n  }\n\n  /**\n   * Add transaction commitment\n   * @param transaction\n   * @returns transaction with added commitment\n   */\n  protected addRecentCommitment = async (\n    transaction: Transaction,\n  ): Promise<Transaction> => {\n    const { blockhash } = await this.connection.getRecentBlockhash('confirmed')\n    transaction.recentBlockhash = blockhash\n    return transaction\n  }\n\n  /**\n   * Add transaction signature\n   * @param transaction\n   * @param { publicKey, signature } signature\n   * @returns transaction with added signature\n   */\n  protected addSignature = (\n    transaction: Transaction,\n    { publicKey, signature }: Signature,\n  ): Transaction => {\n    if (!transaction.feePayer) transaction.feePayer = publicKey\n    transaction.addSignature(publicKey, signature)\n    return transaction\n  }\n}\n\nexport default Tx\n","import {\n  PublicKey,\n  Transaction,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from '@solana/web3.js'\nimport { SPLT, account, WalletInterface } from '@senswap/sen-js'\n\nimport Tx from './tx'\n\nconst soproxABI = require('soprox-abi')\n\nconst ErrorMapping = [\n  'Invalid instruction',\n  'Incorrect program id',\n  'Operation overflowed',\n  'Invalid owner',\n]\n\nclass Bulksender extends Tx {\n  readonly bulksenderProgramId: PublicKey\n  readonly spltProgramId: PublicKey\n  readonly splataProgramId: PublicKey\n  private _splt: SPLT\n\n  constructor(\n    bulksenderProgramAddress: string,\n    spltProgramAddress: string,\n    splataProgramAddress: string,\n    nodeUrl: string,\n  ) {\n    super(nodeUrl, ErrorMapping)\n\n    if (!account.isAddress(bulksenderProgramAddress))\n      throw new Error('Invalid bulksender program address')\n    if (!account.isAddress(spltProgramAddress))\n      throw new Error('Invalid SPL token program address')\n    if (!account.isAddress(splataProgramAddress))\n      throw new Error('Invalid SPL associated token program address')\n    this.bulksenderProgramId = account.fromAddress(bulksenderProgramAddress)\n    this.spltProgramId = account.fromAddress(spltProgramAddress)\n    this.splataProgramId = account.fromAddress(splataProgramAddress)\n\n    this._splt = new SPLT(spltProgramAddress, splataProgramAddress, nodeUrl)\n  }\n\n  /**\n   * Checked transfer\n   * @param amount Number of tokens\n   * @param dstAddress Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedTransfer = async (\n    amount: bigint,\n    dstAddress: string,\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Validation\n    if (!account.isAddress(dstAddress))\n      throw new Error('Invalid destination address')\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      dstAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const dstPublicKey = account.fromAddress(dstAddress)\n    const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'amount', type: 'u64' },\n      ],\n      { code: 0, amount },\n    )\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n        { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: dstPublicKey, isSigner: false, isWritable: false },\n        { pubkey: dstAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n      ],\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n\n  /**\n   * Build checkedBulkTransfer transaction\n   * @param amounts\n   * @param dstAddresses\n   * @param mintAddress\n   * @param wallet\n   * @returns\n   */\n  private buildCheckedBulkTransferTransaction = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<Transaction> => {\n    // Validation\n    for (const dstAddress of dstAddresses) {\n      if (!account.isAddress(dstAddress))\n        throw new Error(`Invalid destination address: ${dstAddress}`)\n    }\n    for (const amount of amounts) {\n      if (!amount) throw new Error(`Invalid amount: ${amount}`)\n    }\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    if (amounts.length !== dstAddresses.length)\n      throw new Error(\n        `The number of amounts and the number of addresses are unmatcher (${amounts.length}, ${dstAddresses.length})`,\n      )\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'num_txs', type: 'u32' },\n        { key: 'amounts', type: `[u64;${amounts.length}]` },\n      ],\n      { code: 1, num_txs: amounts.length, amounts },\n    )\n    let keys = [\n      { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n      { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n      { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n    ]\n    for (const dstAddress of dstAddresses) {\n      const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n        dstAddress,\n        mintAddress,\n      )\n      const dstPublicKey = account.fromAddress(dstAddress)\n      const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n      keys.push({ pubkey: dstPublicKey, isSigner: false, isWritable: false })\n      keys.push({\n        pubkey: dstAssociatedPublicKey,\n        isSigner: false,\n        isWritable: true,\n      })\n    }\n    const instruction = new TransactionInstruction({\n      keys,\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    return transaction\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Error\n   */\n  simulateBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<boolean> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Simulate the transaction\n    const {\n      value: { err },\n    } = await this.connection.simulateTransaction(transaction)\n    if (err) return false\n    return true\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n}\n\nexport default Bulksender\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, AccountData } from '@senswap/sen-js'\nimport { useAccount, useWallet } from 'senhub/providers'\n\nimport { Row, Col, Button, Typography, Space } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport configs from 'app/configs'\nimport { AppState } from 'app/model'\nimport { explorer, toBigInt } from 'shared/util'\nimport { TransferData, setData } from 'app/model/main.controller'\nimport Bulksender from 'app/lib'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node },\n} = configs\n\nconst Action = () => {\n  const dispatch = useDispatch()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<boolean | string>(false)\n  const [bulk, setBulk] = useState<Array<TransferData>>([])\n  const { data, mintAddress } = useSelector((state: AppState) => state.main)\n  const { accounts } = useAccount() as {\n    accounts: { [key: string]: AccountData }\n  }\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n\n  // Need to merge\n  const duplicated = useMemo(() => {\n    if (!data || !data.length) return false\n    const duplicatedElements = data.filter(([address], index) => {\n      const expectedIndex = data.findIndex(\n        ([expectedAddress]) => address === expectedAddress,\n      )\n      return expectedIndex !== index && expectedIndex > -1\n    })\n    if (duplicatedElements.length > 0) return true\n    return false\n  }, [data])\n  // Merge duplicated addresses (must call when no error)\n  const merge = useCallback(async () => {\n    const nextData = [] as TransferData\n    for (const [address, amount] of data) {\n      const index = nextData.findIndex(([addr]) => addr === address)\n      if (index >= 0) {\n        nextData[index][1] = (\n          toBigInt(nextData[index][1]) + toBigInt(amount)\n        ).toString()\n      } else {\n        nextData.push([address, amount])\n      }\n    }\n    await dispatch(setData(nextData))\n  }, [data, dispatch])\n  // Send a bulk\n  const send = useCallback(async () => {\n    await setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    for (const transferData of bulk) {\n      try {\n        const {\n          sentre: { wallet },\n        } = window\n        if (!wallet) throw new Error('Cannot connect wallet')\n        const { txId } = await bulksender.checkedBulkTransfer(\n          transferData.map(([_, amount]) => toBigInt(amount)),\n          transferData.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n        )\n        window.notify({\n          type: 'success',\n          description: 'Successfully transfer tokens. Click to view details.',\n          onClick: () => window.open(explorer(txId), '_blank'),\n        })\n      } catch (er: any) {\n        window.notify({ type: 'error', description: er.message })\n      }\n    }\n    await setLoading(false)\n  }, [bulk, mintAddress])\n\n  // Checked error\n  const checkError = useCallback(async () => {\n    // Check data length\n    if (!data || !data.length) return setError(true)\n    // Check wallet address\n    if (!account.isAddress(walletAddress))\n      return setError('Please connect your wallet')\n    if (!account.isAddress(mintAddress))\n      return setError('Please select a token to send')\n    // Check data contents\n    const failedElements = data.filter(([address, amount]) => {\n      if (!account.isAddress(address)) return true\n      if (!toBigInt(amount)) return true\n      return false\n    })\n    if (failedElements.length > 0) return setError(true)\n    // Check balance\n    const {\n      sentre: { splt },\n    } = window\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    const { amount: balance } = accounts[accountAddress] || {\n      amount: BigInt(0),\n    }\n    const amount = data.reduce((a, [_, b]) => a + toBigInt(b), BigInt(0))\n    if (balance < amount) return setError('Not enough token balance')\n    // No error\n    return setError(false)\n  }, [data, mintAddress, accounts, walletAddress])\n\n  useEffect(() => {\n    checkError()\n  }, [checkError])\n\n  // Compute bulk\n  const computeBulk = useCallback(async () => {\n    if (error) return setBulk([])\n    const {\n      sentre: { wallet },\n    } = window\n    if (!wallet) return setError('Cannot connect wallet')\n\n    await setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    let currentData = [...data]\n    const newBulk: Array<TransferData> = [[]]\n    while (currentData.length) {\n      const [address, amount] = currentData.shift() as [string, string]\n      const currentBulk = newBulk[newBulk.length - 1]\n      const simulatedBulk = [...currentBulk, [address, amount]] as TransferData\n      const ok = await bulksender.simulateBulkTransfer(\n        simulatedBulk.map(([_, amount]) => toBigInt(amount)),\n        simulatedBulk.map(([address, _]) => address),\n        mintAddress,\n        wallet,\n      )\n      if (ok) newBulk[newBulk.length - 1] = simulatedBulk\n      else if (currentBulk.length <= 1) {\n        await setError(\n          'Cannot handle the transaction. Make sure that your SOL balance is enough to pay fees.',\n        )\n        return setLoading(false)\n      } else newBulk.push([[address, amount]])\n    }\n    await setBulk(newBulk)\n    return setLoading(false)\n  }, [error, data, mintAddress])\n\n  useEffect(() => {\n    computeBulk()\n  }, [computeBulk])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        {typeof error === 'string' ? (\n          <Space>\n            <IonIcon\n              name=\"information-circle-outline\"\n              style={{ color: '#F2323F' }}\n            />\n            <Typography.Text type=\"danger\">{error}</Typography.Text>\n          </Space>\n        ) : (\n          <Space>\n            <IonIcon name=\"information-circle-outline\" />\n            <Typography.Text type={bulk.length ? undefined : 'secondary'}>\n              To send tokens to <strong>{data.length}</strong> address(es), you\n              will need to sign <strong>{bulk.length}</strong> time(s) with the\n              total estimated fee is ~{bulk.length * 0.005} SOL.\n            </Typography.Text>\n          </Space>\n        )}\n      </Col>\n      <Col span={12}>\n        <Button\n          type=\"text\"\n          icon={<IonIcon name=\"git-merge-outline\" />}\n          onClick={merge}\n          disabled={loading || !!error || !duplicated}\n          block\n        >\n          Merge\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button\n          type=\"primary\"\n          icon={<IonIcon name=\"send\" />}\n          onClick={send}\n          disabled={!!error}\n          loading={loading}\n          block\n        >\n          Send\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Action\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Papa from 'papaparse'\n\nimport { Row, Col, Upload, Space, Button, Typography } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport { TransferData, setData } from 'app/model/main.controller'\n\nconst parse = (file: any): Promise<TransferData> => {\n  return new Promise((resolve, reject) => {\n    return Papa.parse(file, {\n      skipEmptyLines: true,\n      complete: ({ data }) => resolve(data as TransferData),\n    })\n  })\n}\n\nconst Collector = () => {\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const upload = async (file: any) => {\n    await setLoading(true)\n    await dispatch(setData(await parse(file)))\n    await setLoading(false)\n    return false\n  }\n  const remove = async () => {\n    await setLoading(true)\n    await dispatch(setData([]))\n    await setLoading(false)\n    return true\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ marginBottom: 16 }}>\n        <Upload.Dragger\n          accept=\".csv,.txt\"\n          beforeUpload={upload}\n          onRemove={remove}\n          maxCount={1}\n        >\n          <Space direction=\"vertical\" size=\"large\" align=\"center\">\n            <Typography.Title level={3}>\n              Click or Drop file to upload\n            </Typography.Title>\n            <Typography.Text>\n              The accepted file types are <code>.csv</code>, <code>.txt</code>.\n            </Typography.Text>\n            <Button\n              type=\"primary\"\n              icon={<IonIcon name=\"cloud-upload-outline\" />}\n              loading={loading}\n            >\n              Upload\n            </Button>\n          </Space>\n        </Upload.Dragger>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Collector\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintAvatar = ({\n  mintAddress,\n  onClick = () => {},\n  size = 24,\n}: {\n  mintAddress: string\n  size?: number\n  onClick?: () => void\n}) => {\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n  const [logoURIs, setLogoURIs] = useState<(string | undefined)[]>([])\n\n  const getLogoURIs = useCallback(async () => {\n    // Normal mint\n    const { logoURI } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    if (logoURI) return setLogoURIs([logoURI])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { logoURI: logoURIA } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { logoURI: logoURIB } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setLogoURIs([logoURIA, logoURIB])\n    }\n    // Unknown mint\n    return setLogoURIs([undefined])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    getLogoURIs()\n  }, [getLogoURIs])\n\n  return (\n    <span onClick={onClick}>\n      <Avatar.Group style={{ display: 'block' }}>\n        {logoURIs.map((logoURI, i) => (\n          <Avatar\n            key={i}\n            src={logoURI}\n            size={size}\n            style={{ backgroundColor: '#f0f2f5', border: 'none' }}\n          >\n            <IonIcon name=\"diamond-outline\" />\n          </Avatar>\n        ))}\n      </Avatar.Group>\n    </span>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintName = ({ mintAddress }: { mintAddress: string }) => {\n  const [name, setName] = useState('')\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  const getName = useCallback(async () => {\n    const { name } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    // Normal mint\n    if (name) return setName(name)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { symbol: symbol_a } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { symbol: symbol_b } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setName(`${symbol_a} • ${symbol_b} LP`)\n    }\n    // Unknown mint\n    const shortenName = mintAddress.substring(0, 6)\n    return setName(shortenName)\n  }, [tokenProvider, mintAddress, pools])\n\n  useEffect(() => {\n    getName()\n  }, [getName])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintSymbol = ({ mintAddress }: { mintAddress: string }) => {\n  const [symbol, setSymbol] = useState('')\n  const { pools } = usePool()\n  const { tokenProvider } = useMint()\n\n  const getSymbol = useCallback(async () => {\n    const { symbol } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    // Normal mint\n    if (symbol) return setSymbol(symbol)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { symbol: symbolA } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { symbol: symbolB } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setSymbol(`${symbolA} • ${symbolB}`)\n    }\n    // Unknown mint\n    return setSymbol('TOKEN')\n  }, [tokenProvider, mintAddress, pools])\n\n  useEffect(() => {\n    getSymbol()\n  }, [getSymbol])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, AccountData, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet, useMint } from 'senhub/providers'\nimport numbro from 'numbro'\n\nimport { Row, Col, Select, Space, Typography, Card } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'app/components/mint'\n\nimport { AppState } from 'app/model'\nimport { setMintAddress } from 'app/model/main.controller'\n\nconst MintSelection = () => {\n  const dispatch = useDispatch()\n  const [balance, setBalance] = useState('0')\n  const { mintAddress } = useSelector((state: AppState) => state.main)\n  const { accounts } = useAccount() as {\n    accounts: { [key: string]: AccountData }\n  }\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { getMint } = useMint()\n\n  const getBalance = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !account.isAddress(walletAddress))\n      return setBalance('0')\n    const {\n      sentre: { splt },\n    } = window\n    const {\n      [mintAddress]: { decimals },\n    } = await getMint({ address: mintAddress })\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    const { amount } = accounts[accountAddress] || { amount: BigInt(0) }\n    const balance = utils.undecimalize(amount, decimals)\n    return setBalance(balance)\n  }, [mintAddress, walletAddress, getMint, accounts])\n\n  useEffect(() => {\n    getBalance()\n  }, [getBalance])\n\n  return (\n    <Card>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Select\n            size=\"large\"\n            placeholder=\"Select token\"\n            style={{ width: '100%' }}\n            onChange={(mintAddress) =>\n              dispatch(setMintAddress(mintAddress as string))\n            }\n          >\n            {Object.values(accounts).map(({ mint: mintAddress }, i) => (\n              <Select.Option key={mintAddress + i} value={mintAddress}>\n                <Space align=\"center\">\n                  <MintAvatar mintAddress={mintAddress} />\n                  <Typography.Text type=\"secondary\">\n                    <MintSymbol mintAddress={mintAddress} />\n                  </Typography.Text>\n                  <Typography.Text>\n                    <MintName mintAddress={mintAddress} />\n                  </Typography.Text>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={24}>\n          <Space>\n            <Typography.Text type=\"secondary\">Balance:</Typography.Text>\n            <Typography.Text>\n              {numbro(balance || 0).format('0,0.[0000]')}\n            </Typography.Text>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintSelection\n","import { ChangeEvent, useState, forwardRef, useCallback, useRef } from 'react'\n\nimport { Input, Tooltip, Space, InputProps } from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\n\nlet timeoutId: ReturnType<typeof setTimeout> | undefined\n\n/**\n * Numeric Input\n * - Check balance based on max\n * - Only accept numeric characters\n * @remarks The props of input follows the same as https://ant.design/components/input/#API. Extra & Overrided props\n * @param max - Maximum\n * @param onValue - A triggerred function if a valid number\n */\nconst NumericInput = forwardRef(\n  (\n    {\n      max,\n      onValue = () => {},\n      onChange = () => {},\n      onBlur = () => {},\n      ...props\n    }: InputProps & {\n      onValue?: (val: string) => void\n      max?: string | number\n    },\n    ref: any,\n  ) => {\n    const [error, setError] = useState('')\n    const [cursor, setCursor] = useState<number | null>(null)\n    const innerRef = useRef(ref)\n\n    // Handle amount\n    const onAmount = useCallback(\n      (val: string) => {\n        const onError = (er: string) => {\n          if (timeoutId) {\n            clearTimeout(timeoutId)\n            timeoutId = undefined\n          }\n          setError(er)\n          timeoutId = setTimeout(() => setError(''), 500)\n        }\n        const reg = /^\\d*(\\.\\d*)?$/\n        if (!reg.test(val)) return onError('Invalid character')\n        if (max && parseFloat(val) > parseFloat(max.toString()))\n          return onError('Not enough balance')\n        return onValue(val)\n      },\n      [max, onValue],\n    )\n    // Handle cursor\n    innerRef?.current?.setSelectionRange(cursor, cursor)\n    return (\n      <Tooltip\n        title={\n          <Space>\n            <IonIcon name=\"warning\" />\n            {error}\n          </Space>\n        }\n        visible={!!error}\n      >\n        <Input\n          {...props}\n          onBlur={(e) => {\n            onBlur(e)\n            const value = Number(e.target.value)\n            if (e.target.value) onAmount(value ? value.toString() : '')\n          }}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => {\n            onChange(e)\n            setCursor(e.target.selectionStart)\n            onAmount(e.target.value || '')\n          }}\n          ref={innerRef}\n        />\n      </Tooltip>\n    )\n  },\n)\n\nexport default NumericInput\n","import { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport {\n  Row,\n  Col,\n  Card,\n  Button,\n  Typography,\n  Tooltip,\n  Divider,\n  Space,\n  Input,\n} from 'antd'\nimport IonIcon from 'shared/antd/ionicon'\nimport NumericInput from 'shared/antd/numericInput'\n\nimport { setData } from 'app/model/main.controller'\nimport { AppState } from 'app/model'\nimport { toBigInt } from 'shared/util'\nimport { ChangeEvent, useState } from 'react'\n\nconst Line = ({\n  index,\n  address,\n  amount,\n  onClick = () => {},\n  warning = '',\n  error = '',\n}: {\n  index: number\n  address: string\n  amount: string\n  onClick?: (index: number) => void\n  warning?: string\n  error?: string\n}) => {\n  return (\n    <Row gutter={[16, 8]}>\n      <Col span={24}>\n        <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n          <Col>\n            <Typography.Text type=\"secondary\">#{index + 1}</Typography.Text>\n          </Col>\n          <Col span={12}>\n            <Tooltip title={address}>\n              <Typography.Text ellipsis>{address}</Typography.Text>\n            </Tooltip>\n          </Col>\n          <Col flex=\"auto\">\n            <Typography.Text>\n              {!toBigInt(amount) ? amount : numbro(amount).format('0,0')}\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Space align=\"center\">\n              {warning ? (\n                <Tooltip title={warning}>\n                  <IonIcon\n                    name=\"alert-circle-outline\"\n                    style={{ color: '#FCB017' }}\n                  />\n                </Tooltip>\n              ) : null}\n              {error ? (\n                <Tooltip title={error}>\n                  <IonIcon\n                    name=\"warning-outline\"\n                    style={{ color: '#F2323F' }}\n                  />\n                </Tooltip>\n              ) : null}\n              <Button\n                type=\"text\"\n                icon={<IonIcon name=\"trash-outline\" />}\n                onClick={() => onClick(index)}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n    </Row>\n  )\n}\n\nconst Add = ({\n  value,\n  onClick = () => {},\n  onChange = () => {},\n}: {\n  value: { address: string; amount: string }\n  onClick?: () => void\n  onChange?: (value: { address: string; amount: string }) => void\n}) => {\n  const { address, amount } = value\n  const onAddress = (e: ChangeEvent<HTMLInputElement>) => {\n    return onChange({ ...value, address: e.target.value })\n  }\n  const onAmount = (val: string) => {\n    return onChange({ ...value, amount: val })\n  }\n  const onCallback = () => {\n    if (!account.isAddress(address) || !toBigInt(amount)) return\n    return onClick()\n  }\n  return (\n    <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n      <Col span={12}>\n        <Input placeholder=\"Address\" value={address} onChange={onAddress} />\n      </Col>\n      <Col flex=\"auto\">\n        <NumericInput placeholder=\"Amount\" value={amount} onValue={onAmount} />\n      </Col>\n      <Col>\n        <Button\n          type=\"primary\"\n          icon={<IonIcon name=\"add-outline\" />}\n          onClick={onCallback}\n        />\n      </Col>\n    </Row>\n  )\n}\n\nconst Representor = () => {\n  const dispatch = useDispatch()\n  const [record, setRecord] = useState({ address: '', amount: '' })\n  const { data } = useSelector((state: AppState) => state.main)\n\n  const add = async () => {\n    const nextData = [...data]\n    nextData.push([record.address, record.amount])\n    await dispatch(setData(nextData))\n    return setRecord({ address: '', amount: '' })\n  }\n  const remove = (index: number) => {\n    const nextData = [...data]\n    nextData.splice(index, 1)\n    return dispatch(setData(nextData))\n  }\n\n  return (\n    <Card\n      bodyStyle={{\n        padding: 16,\n        cursor: 'pointer',\n        height: 228,\n        overflow: 'auto',\n      }}\n      hoverable\n    >\n      <Row gutter={[8, 8]}>\n        {!data.length ? (\n          <Col span={24}>\n            <Typography.Text type=\"secondary\">No Data</Typography.Text>\n          </Col>\n        ) : null}\n        {data.map(([address, amount], i) => {\n          const error = !account.isAddress(address)\n            ? 'Invalid address'\n            : !toBigInt(amount)\n            ? 'Invalid amount'\n            : ''\n          const duplicatedIndex = data\n            .slice(0, i)\n            .findIndex(([addr]) => addr === address)\n          const warning =\n            duplicatedIndex >= 0\n              ? `Duplicated address to #${duplicatedIndex}`\n              : ''\n          return (\n            <Col key={address + i} span={24}>\n              <Line\n                index={i}\n                address={address}\n                amount={amount}\n                onClick={remove}\n                error={error}\n                warning={warning}\n              />\n            </Col>\n          )\n        })}\n        <Col span={24}>\n          <Add value={record} onChange={setRecord} onClick={add} />\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default Representor\n","import { Row, Col, Typography } from 'antd'\nimport Action from './action'\nimport Collector from './collector'\nimport MintSelection from './mintSelection'\nimport Representor from './representor'\n\nconst Page = () => {\n  return (\n    <Row gutter={[24, 24]} justify=\"center\">\n      <Col span={24} style={{ maxWidth: 1200 }}>\n        <Row gutter={[24, 24]}>\n          <Col span={24}>\n            <Typography.Title level={3}>Solana Bulk Sender</Typography.Title>\n          </Col>\n          <Col xs={{ span: 24 }} md={{ span: 12 }}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <MintSelection />\n              </Col>\n              <Col span={24}>\n                <Collector />\n              </Col>\n            </Row>\n          </Col>\n          <Col xs={{ span: 24 }} md={{ span: 12 }}>\n            <Row gutter={[24, 24]}>\n              <Col span={24}>\n                <Representor />\n              </Col>\n              <Col span={24}>\n                <Action />\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24} />\n    </Row>\n  )\n}\n\nexport default Page\n","import { Row, Col, Typography } from 'antd'\n\nimport { env } from 'shared/runtime'\nimport { useUI } from 'senhub/providers'\n\nconst Widget = () => {\n  const {\n    ui: { width, infix },\n  } = useUI()\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Typography.Title level={5}>BulkSender Widget</Typography.Title>\n        <Typography.Text>\n          Env: {env} - {width}px - {infix}\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Widget\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nexport const devTools = (appName: string): any => {\n  if (process.env.REACT_APP_ENV !== 'development') return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\n// BigInt Serialization Middleware\n// https://redux-toolkit.js.org/api/serializabilityMiddleware\nconst isPlain = (val: any): boolean => {\n  const isPlainObject = (obj: object): boolean => {\n    if (obj === null) return false\n    const proto = Object.getPrototypeOf(obj)\n    return proto !== null && Object.getPrototypeOf(proto) === null\n  }\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString() // https://github.com/GoogleChromeLabs/jsbi/issues/30\n}\nexport const bigintSerializationMiddleware = {\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { devTools, bigintSerializationMiddleware } from 'shared/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware(bigintSerializationMiddleware),\n  devTools: devTools('myapp'),\n  reducer: {\n    main,\n  },\n})\n\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  UIProvider,\n  WalletProvider,\n  AccountProvider,\n  MintProvider,\n  PoolProvider,\n} from 'senhub/providers'\n\nimport PageView from 'app/page'\nimport WidgetView from 'app/widget'\n\nimport model from 'app/model'\nimport configs from 'app/configs'\nimport 'app/static/styles/light.less'\nimport 'app/static/styles/dark.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider appId={appId} antd={{ prefixCls: appId }}>\n      <WalletProvider>\n        <AccountProvider>\n          <MintProvider>\n            <PoolProvider>\n              <Provider store={model}>\n                <PageView />\n              </Provider>\n            </PoolProvider>\n          </MintProvider>\n        </AccountProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n\nexport const widgetConfig: WidgetConfig = {\n  size: 'small',\n  type: 'solid',\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider appId={appId} antd={{ prefixCls: appId }}>\n      <WalletProvider>\n        <AccountProvider>\n          <MintProvider>\n            <PoolProvider>\n              <Provider store={model}>\n                <WidgetView />\n              </Provider>\n            </PoolProvider>\n          </MintProvider>\n        </AccountProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n","import storage from './storage'\n\n/**\n * Environment\n */\nconst getEnv = () => {\n  switch (process.env.REACT_APP_ENV) {\n    case 'development':\n      return 'development'\n    case 'staging':\n      return 'staging'\n    case 'production':\n      return 'production'\n    default:\n      return 'development'\n  }\n}\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = getEnv()\n\n/**\n * Network\n */\nconst getNetwork = () => {\n  switch (storage.get('network')) {\n    case 'devnet':\n      return 'devnet'\n    case 'testnet':\n      return 'testnet'\n    case 'mainnet':\n      return 'mainnet'\n    default:\n      return 'mainnet'\n  }\n}\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = getNetwork()\n\nexport const onSwitchNetwork = (value: Net) => {\n  storage.set('network', value)\n  return window.location.reload()\n}\n","const KEY = 'sentre'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n"],"names":["CUSTOM_ICONS","forwardRef","name","className","props","ref","cln","src","shared","appId","process","url","senhub","devnet","node","spltAddress","splataAddress","bulksenderAddress","testnet","mainnet","manifest","development","staging","production","env","sol","net","DEFAULT_CACHE_CONFIG","ttl","DEFAULT_SINGLE_FLIGHT_CONFIG","limit","calls","time","cache","RequestQueue","constructor","key","resolveQueue","rejectQueue","this","add","resolve","reject","push","resolves","data","length","shift","rejects","error","SingleFlightCache","value","configs","mapCache","set","setTimeout","delete","get","Map","DataLoader","instanceKey","JSON","stringify","mapInstance","has","instance","newSingleFlight","SingleFlight","requestKey","callback","singleFlight","getSingleFlight","newRequest","load","config","intervalRequest","timeLogs","mapRequestCalling","requestQueue","Object","assign","cacheData","Promise","isFetch","request","fetch","validateLimit","addRequestQueue","createTimeLogs","then","response","catch","finally","fetchRequestQueue","clearInterval","setInterval","now","Date","getTime","toBigInt","number","BigInt","er","NAME","setData","createAsyncThunk","async","setMintAddress","mintAddress","createSlice","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","TxError","Error","msg","txId","super","info","nodeUrl","errorMapping","connection","throwError","defaultError","instructionError","InstructionError","Custom","sendTransaction","tx","transaction","serialize","sendRawTransaction","skipPreflight","preflightCommitment","err","confirmTransaction","addRecentCommitment","blockhash","getRecentBlockhash","recentBlockhash","addSignature","publicKey","signature","feePayer","Connection","soproxABI","require","ErrorMapping","Tx","bulksenderProgramAddress","spltProgramAddress","splataProgramAddress","bulksenderProgramId","spltProgramId","splataProgramId","_splt","checkedTransfer","amount","dstAddress","wallet","account","payerAddress","getAddress","payerPublicKey","srcAssociatedAddress","deriveAssociatedAddress","dstAssociatedAddress","srcAssociatedPublicKey","dstPublicKey","dstAssociatedPublicKey","mintPublicKey","Transaction","layout","struct","type","code","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","programId","toBuffer","payerSig","rawSignTransaction","buildCheckedBulkTransferTransaction","amounts","dstAddresses","num_txs","simulateBulkTransfer","simulateTransaction","checkedBulkTransfer","SPLT","dispatch","useDispatch","loading","setLoading","useState","setError","bulk","setBulk","useSelector","main","accounts","useAccount","address","walletAddress","useWallet","duplicated","useMemo","filter","index","expectedIndex","findIndex","expectedAddress","merge","useCallback","nextData","addr","toString","send","bulksender","Bulksender","transferData","sentre","window","map","_","notify","description","onClick","open","addressOrTxId","message","checkError","failedElements","splt","accountAddress","balance","reduce","a","b","useEffect","computeBulk","currentData","newBulk","currentBulk","simulatedBulk","ok","Row","gutter","Col","span","Space","style","color","Typography","undefined","Button","icon","disabled","block","marginBottom","Upload","accept","beforeUpload","file","Papa","skipEmptyLines","complete","parse","onRemove","maxCount","direction","size","align","level","pools","usePool","tokenProvider","useMint","logoURIs","setLogoURIs","getLogoURIs","logoURI","findByAddress","poolData","values","find","mint_lpt","mint_a","mint_b","logoURIA","logoURIB","Avatar","display","i","backgroundColor","border","setName","getName","symbol","symbol_a","symbol_b","shortenName","substring","setSymbol","getSymbol","symbolA","symbolB","setBalance","getMint","getBalance","decimals","utils","Card","Select","placeholder","width","onChange","mint","numbro","format","timeoutId","max","onValue","onBlur","cursor","setCursor","innerRef","useRef","onAmount","val","onError","clearTimeout","test","parseFloat","current","setSelectionRange","Tooltip","title","visible","Input","e","Number","target","selectionStart","Line","warning","wrap","ellipsis","flex","Divider","margin","Add","record","setRecord","remove","splice","bodyStyle","padding","height","overflow","hoverable","duplicatedIndex","slice","justify","maxWidth","xs","md","ui","infix","useUI","prototype","toJSON","bigintSerializationMiddleware","serializableCheck","isSerializable","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","configureStore","middleware","getDefaultMiddleware","devTools","reducer","Page","UIProvider","antd","prefixCls","WalletProvider","AccountProvider","MintProvider","PoolProvider","Provider","store","model","widgetConfig","Widget","storage","getNetwork","KEY","driver","localStorage","convert","getItem","setItem","clear"],"sourceRoot":""}