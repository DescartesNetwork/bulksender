{"version":3,"file":"static/js/85.c98a155a.chunk.js","mappings":"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","sources":["app/model/main.controller.tsx","app/lib/tx.ts","app/lib/index.ts","app/page/action.tsx","app/page/collector.tsx","app/components/mint/mintAvatar.tsx","app/components/mint/mintName.tsx","app/components/mint/mintSymbol.tsx","app/page/mintSelection.tsx","app/page/representor.tsx","app/page/index.tsx","app/widget/index.tsx","store/middleware.ts","store/devTools.ts","app/model/index.ts","app/index.tsx","components/ionicon.tsx","configs/index.ts","configs/manifest.config.ts","configs/runtime.ts","configs/sol.config.ts","helpers/storage.ts","helpers/util.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\n\n/**\n * Interface & Utility\n */\nexport type TransferData = Array<[string, string]>\nexport type State = {\n  mintAddress: string\n  data: TransferData /* address, amount */\n}\n\n/**\n * Store constructor\n */\n\nconst NAME = 'main'\nconst initialState: State = {\n  mintAddress: '',\n  data: [],\n}\n\n/**\n * Actions\n */\n\nexport const setData = createAsyncThunk(\n  `${NAME}/setData`,\n  async (data: TransferData) => {\n    return { data }\n  },\n)\n\nexport const setMintAddress = createAsyncThunk(\n  `${NAME}/setMintAddress`,\n  async (mintAddress: string) => {\n    return { mintAddress }\n  },\n)\n\n/**\n * Usual procedure\n */\n\nconst slice = createSlice({\n  name: NAME,\n  initialState,\n  reducers: {},\n  extraReducers: (builder) =>\n    void builder\n      .addCase(\n        setData.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      )\n      .addCase(\n        setMintAddress.fulfilled,\n        (state, { payload }) => void Object.assign(state, payload),\n      ),\n})\n\nexport default slice.reducer\n","import { Signature } from '@senswap/sen-js'\nimport { Connection, Transaction } from '@solana/web3.js'\n\nexport class TxError extends Error {\n  info: { txId: string }\n\n  constructor(msg: string, txId: string = '') {\n    super(msg)\n\n    this.name = `Error: ${msg}`\n    this.info = { txId }\n  }\n}\n\nclass Tx {\n  nodeUrl: string\n  connection: Connection\n  errorMapping: string[]\n\n  constructor(nodeUrl: string, errorMapping: string[] = []) {\n    this.nodeUrl = nodeUrl\n    this.errorMapping = errorMapping\n    this.connection = new Connection(this.nodeUrl, 'confirmed')\n  }\n\n  /**\n   * Build programmable error\n   * The method's precision os very relative, it's will parse wrong error in case of invoking programs\n   * @param er\n   * @param txId\n   * @returns\n   */\n  private throwError = (er: any, txId: string) => {\n    const defaultError = 'Transaction failed'\n    if (!er) throw new TxError(defaultError, txId)\n    const instructionError = er.InstructionError || []\n    if (typeof instructionError[1] == 'string')\n      throw new TxError(instructionError[1], txId)\n    const { Custom } = instructionError[1] || {}\n    if (typeof Custom !== 'number') throw new TxError(defaultError, txId)\n    throw new TxError(this.errorMapping[Custom] || defaultError, txId)\n  }\n\n  /**\n   * Broadcast a transaction to clusters and return the txId when it's confirmed\n   * @param transaction Signed transaction\n   * @returns transaction id\n   */\n  protected sendTransaction = async (\n    transaction: Transaction,\n  ): Promise<string> => {\n    const tx = transaction.serialize()\n    const txId = await this.connection.sendRawTransaction(tx, {\n      skipPreflight: true,\n      preflightCommitment: 'confirmed',\n    })\n    const {\n      value: { err },\n    } = await this.connection.confirmTransaction(txId, 'confirmed')\n    if (err) return this.throwError(err, txId)\n    return txId\n  }\n\n  /**\n   * Add transaction commitment\n   * @param transaction\n   * @returns transaction with added commitment\n   */\n  protected addRecentCommitment = async (\n    transaction: Transaction,\n  ): Promise<Transaction> => {\n    const { blockhash } = await this.connection.getRecentBlockhash('confirmed')\n    transaction.recentBlockhash = blockhash\n    return transaction\n  }\n\n  /**\n   * Add transaction signature\n   * @param transaction\n   * @param { publicKey, signature } signature\n   * @returns transaction with added signature\n   */\n  protected addSignature = (\n    transaction: Transaction,\n    { publicKey, signature }: Signature,\n  ): Transaction => {\n    if (!transaction.feePayer) transaction.feePayer = publicKey\n    transaction.addSignature(publicKey, signature)\n    return transaction\n  }\n}\n\nexport default Tx\n","import {\n  PublicKey,\n  Transaction,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  SystemProgram,\n} from '@solana/web3.js'\nimport { SPLT, account, WalletInterface } from '@senswap/sen-js'\n\nimport Tx from './tx'\n\nconst soproxABI = require('soprox-abi')\n\nconst ErrorMapping = [\n  'Invalid instruction',\n  'Incorrect program id',\n  'Operation overflowed',\n  'Invalid owner',\n]\n\nclass Bulksender extends Tx {\n  readonly bulksenderProgramId: PublicKey\n  readonly spltProgramId: PublicKey\n  readonly splataProgramId: PublicKey\n  private _splt: SPLT\n\n  constructor(\n    bulksenderProgramAddress: string,\n    spltProgramAddress: string,\n    splataProgramAddress: string,\n    nodeUrl: string,\n  ) {\n    super(nodeUrl, ErrorMapping)\n\n    if (!account.isAddress(bulksenderProgramAddress))\n      throw new Error('Invalid bulksender program address')\n    if (!account.isAddress(spltProgramAddress))\n      throw new Error('Invalid SPL token program address')\n    if (!account.isAddress(splataProgramAddress))\n      throw new Error('Invalid SPL associated token program address')\n    this.bulksenderProgramId = account.fromAddress(bulksenderProgramAddress)\n    this.spltProgramId = account.fromAddress(spltProgramAddress)\n    this.splataProgramId = account.fromAddress(splataProgramAddress)\n\n    this._splt = new SPLT(spltProgramAddress, splataProgramAddress, nodeUrl)\n  }\n\n  /**\n   * Simulate a transaction\n   * @param transaction\n   * @returns\n   */\n  private simulateTransaction = async (\n    transaction: Transaction,\n  ): Promise<boolean> => {\n    const {\n      value: { err },\n    } = await this.connection.simulateTransaction(transaction)\n    if (\n      err &&\n      (err as any).InstructionError &&\n      ((err as any).InstructionError[1] === 'ProgramFailedToComplete' ||\n        (err as any).InstructionError[1] === 'ComputationalBudgetExceeded')\n    )\n      return false\n    return true\n  }\n\n  /**\n   * Checked transfer\n   * @param amount Number of tokens\n   * @param dstAddress Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedTransfer = async (\n    amount: bigint,\n    dstAddress: string,\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Validation\n    if (!account.isAddress(dstAddress))\n      throw new Error('Invalid destination address')\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      dstAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const dstPublicKey = account.fromAddress(dstAddress)\n    const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'amount', type: 'u64' },\n      ],\n      { code: 0, amount },\n    )\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n        { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: dstPublicKey, isSigner: false, isWritable: false },\n        { pubkey: dstAssociatedPublicKey, isSigner: false, isWritable: true },\n        { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n        { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n        { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n        { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n      ],\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n\n  /**\n   * Build checkedBulkTransfer transaction\n   * @param amounts\n   * @param dstAddresses\n   * @param mintAddress\n   * @param wallet\n   * @returns\n   */\n  private buildCheckedBulkTransferTransaction = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<Transaction> => {\n    // Validation\n    for (const dstAddress of dstAddresses) {\n      if (!account.isAddress(dstAddress))\n        throw new Error(`Invalid destination address: ${dstAddress}`)\n    }\n    for (const amount of amounts) {\n      if (!amount) throw new Error(`Invalid amount: ${amount}`)\n    }\n    if (!account.isAddress(mintAddress)) throw new Error('Invalid mint address')\n    if (amounts.length !== dstAddresses.length)\n      throw new Error(\n        `The number of amounts and the number of addresses are unmatcher (${amounts.length}, ${dstAddresses.length})`,\n      )\n    // Get payer\n    const payerAddress = await wallet.getAddress()\n    const payerPublicKey = account.fromAddress(payerAddress)\n    // Fetch necessary info\n    const srcAssociatedAddress = await this._splt.deriveAssociatedAddress(\n      payerAddress,\n      mintAddress,\n    )\n    // Build public keys\n    const srcAssociatedPublicKey = account.fromAddress(srcAssociatedAddress)\n    const mintPublicKey = account.fromAddress(mintAddress)\n    // Build tx\n    let transaction = new Transaction()\n    transaction = await this.addRecentCommitment(transaction)\n    const layout = new soproxABI.struct(\n      [\n        { key: 'code', type: 'u8' },\n        { key: 'num_txs', type: 'u32' },\n        { key: 'amounts', type: `[u64;${amounts.length}]` },\n      ],\n      { code: 1, num_txs: amounts.length, amounts },\n    )\n    let keys = [\n      { pubkey: payerPublicKey, isSigner: true, isWritable: true },\n      { pubkey: srcAssociatedPublicKey, isSigner: false, isWritable: true },\n      { pubkey: mintPublicKey, isSigner: false, isWritable: false },\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      { pubkey: this.spltProgramId, isSigner: false, isWritable: false },\n      { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n      { pubkey: this.splataProgramId, isSigner: false, isWritable: false },\n    ]\n    for (const dstAddress of dstAddresses) {\n      const dstAssociatedAddress = await this._splt.deriveAssociatedAddress(\n        dstAddress,\n        mintAddress,\n      )\n      const dstPublicKey = account.fromAddress(dstAddress)\n      const dstAssociatedPublicKey = account.fromAddress(dstAssociatedAddress)\n      keys.push({ pubkey: dstPublicKey, isSigner: false, isWritable: false })\n      keys.push({\n        pubkey: dstAssociatedPublicKey,\n        isSigner: false,\n        isWritable: true,\n      })\n    }\n    const instruction = new TransactionInstruction({\n      keys,\n      programId: this.bulksenderProgramId,\n      data: layout.toBuffer(),\n    })\n    transaction.add(instruction)\n    transaction.feePayer = payerPublicKey\n    return transaction\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  simulateBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<boolean> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Simulate the transaction\n    return await this.simulateTransaction(transaction)\n  }\n\n  /**\n   * Checked bulk transfer\n   * @param amounts Number of tokens\n   * @param dstAddresses Destination address (wallet address)\n   * @param mintAddress Mint Address\n   * @param wallet\n   * @returns Transaction id\n   */\n  checkedBulkTransfer = async (\n    amounts: bigint[],\n    dstAddresses: string[],\n    mintAddress: string,\n    wallet: WalletInterface,\n  ): Promise<{\n    txId: string\n  }> => {\n    // Build transaction\n    const transaction = await this.buildCheckedBulkTransferTransaction(\n      amounts,\n      dstAddresses,\n      mintAddress,\n      wallet,\n    )\n    // Sign tx\n    const payerSig = await wallet.rawSignTransaction(transaction)\n    this.addSignature(transaction, payerSig)\n    // Send tx\n    const txId = await this.sendTransaction(transaction)\n    return { txId }\n  }\n}\n\nexport default Bulksender\n","import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport { useUI } from 'senhub/providers'\n\nimport { Row, Col, Button, Typography, Space } from 'antd'\nimport IonIcon from 'components/ionicon'\n\nimport configs from 'configs'\nimport { AppState } from 'app/model'\nimport { explorer, toBigInt } from 'helpers/util'\nimport { TransferData, setData } from 'app/model/main.controller'\nimport Bulksender from 'app/lib'\n\nconst {\n  sol: { spltAddress, splataAddress, bulksenderAddress, node },\n} = configs\n\nconst Action = () => {\n  const dispatch = useDispatch()\n  const [loading, setLoading] = useState(false)\n  const [bulk, setBulk] = useState<Array<TransferData>>([])\n  const { data, mintAddress } = useSelector((state: AppState) => state.main)\n  const { notify } = useUI()\n\n  // Need to merge\n  const duplicated = useMemo(() => {\n    if (!data || !data.length) return false\n    const duplicatedElements = data.filter(([address], index) => {\n      const expectedIndex = data.findIndex(\n        ([expectedAddress]) => address === expectedAddress,\n      )\n      return expectedIndex !== index && expectedIndex > -1\n    })\n    if (duplicatedElements.length > 0) return true\n    return false\n  }, [data])\n  // No error\n  const error = useMemo(() => {\n    if (!data || !data.length) return true\n    if (!account.isAddress(mintAddress)) return true\n    const failedElements = data.filter(([address, amount]) => {\n      if (!account.isAddress(address)) return true\n      if (!toBigInt(amount)) return true\n      return false\n    })\n    if (failedElements.length > 0) return true\n    return false\n  }, [data, mintAddress])\n  // Merge duplicated addresses (must call when no error)\n  const merge = useCallback(async () => {\n    const nextData = [] as TransferData\n    for (const [address, amount] of data) {\n      const index = nextData.findIndex(([addr]) => addr === address)\n      if (index >= 0) {\n        nextData[index][1] = (\n          toBigInt(nextData[index][1]) + toBigInt(amount)\n        ).toString()\n      } else {\n        nextData.push([address, amount])\n      }\n    }\n    await dispatch(setData(nextData))\n  }, [data, dispatch])\n  // Send a bulk\n  const send = useCallback(async () => {\n    await setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    const {\n      senos: { wallet },\n    } = window\n    for (const transferData of bulk) {\n      try {\n        const { txId } = await bulksender.checkedBulkTransfer(\n          transferData.map(([_, amount]) => toBigInt(amount)),\n          transferData.map(([address, _]) => address),\n          mintAddress,\n          wallet,\n        )\n        await notify({\n          type: 'success',\n          description: 'Successfully transfer tokens. Click to view details.',\n          onClick: () => window.open(explorer(txId), '_blank'),\n        })\n        console.log(txId)\n      } catch (er) {\n        await notify({ type: 'error', description: (er as any).message })\n      }\n    }\n    await setLoading(false)\n  }, [bulk, mintAddress, notify])\n  // Compute bulk\n  const computeBulk = useCallback(async () => {\n    if (error) return setBulk([])\n    await setLoading(true)\n    const bulksender = new Bulksender(\n      bulksenderAddress,\n      spltAddress,\n      splataAddress,\n      node,\n    )\n    const {\n      senos: { wallet },\n    } = window\n    let currentData = [...data]\n    const newBulk: Array<TransferData> = [[]]\n    while (currentData.length) {\n      const [address, amount] = currentData.shift() as [string, string]\n      const currentBulk = newBulk[newBulk.length - 1]\n      const simulatedBulk = [...currentBulk, [address, amount]] as TransferData\n      const ok = await bulksender.simulateBulkTransfer(\n        simulatedBulk.map(([_, amount]) => toBigInt(amount)),\n        simulatedBulk.map(([address, _]) => address),\n        mintAddress,\n        wallet,\n      )\n      console.log(currentBulk.length, ok)\n      if (ok) newBulk[newBulk.length - 1] = simulatedBulk\n      else if (currentBulk.length <= 1)\n        throw new Error('Cannot handle transactions')\n      else newBulk.push([[address, amount]])\n    }\n    await setBulk(newBulk)\n    return setLoading(false)\n  }, [error, data, mintAddress])\n\n  useEffect(() => {\n    computeBulk()\n  }, [computeBulk])\n\n  return (\n    <Row gutter={[16, 16]}>\n      <Col span={24}>\n        <Space>\n          <IonIcon name=\"information-circle-outline\" />\n          <Typography.Text type={bulk.length ? undefined : 'secondary'}>\n            To send tokens to <strong>{data.length}</strong> address(es), you\n            will need to sign <strong>{bulk.length}</strong> time(s).\n          </Typography.Text>\n        </Space>\n      </Col>\n      <Col span={12}>\n        <Button\n          type=\"text\"\n          icon={<IonIcon name=\"git-merge-outline\" />}\n          onClick={merge}\n          disabled={loading || error || !duplicated}\n          block\n        >\n          Merge\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button\n          type=\"primary\"\n          icon={<IonIcon name=\"send\" />}\n          onClick={send}\n          disabled={error}\n          loading={loading}\n          block\n        >\n          Send\n        </Button>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Action\n","import { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport Papa from 'papaparse'\n\nimport { Row, Col, Upload, Space, Button, Typography } from 'antd'\nimport IonIcon from 'components/ionicon'\nimport { TransferData, setData } from 'app/model/main.controller'\n\nconst parse = (file: any): Promise<TransferData> => {\n  return new Promise((resolve, reject) => {\n    return Papa.parse(file, {\n      skipEmptyLines: true,\n      complete: ({ data }) => resolve(data as TransferData),\n    })\n  })\n}\n\nconst Collector = () => {\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const upload = async (file: any) => {\n    await setLoading(true)\n    await dispatch(setData(await parse(file)))\n    await setLoading(false)\n    return false\n  }\n  const remove = async () => {\n    await setLoading(true)\n    await dispatch(setData([]))\n    await setLoading(false)\n    return true\n  }\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24} style={{ marginBottom: 16 }}>\n        <Upload.Dragger\n          accept=\".csv,.txt\"\n          beforeUpload={upload}\n          onRemove={remove}\n          maxCount={1}\n        >\n          <Space direction=\"vertical\" size=\"large\" align=\"center\">\n            <Typography.Title level={3}>\n              Click or Drop file to upload\n            </Typography.Title>\n            <Typography.Text>\n              The accepted file types are <code>.csv</code>, <code>.txt</code>.\n            </Typography.Text>\n            <Button\n              type=\"primary\"\n              icon={<IonIcon name=\"cloud-upload-outline\" />}\n              loading={loading}\n            >\n              Upload\n            </Button>\n          </Space>\n        </Upload.Dragger>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Collector\n","import { useCallback, useEffect, useState } from 'react'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { Avatar } from 'antd'\nimport IonIcon from 'components/ionicon'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintAvatar = ({\n  mintAddress,\n  onClick = () => {},\n  size = 24,\n}: {\n  mintAddress: string\n  size?: number\n  onClick?: () => void\n}) => {\n  const { pools } = usePool() as { pools: Map<string, PoolData> }\n  const { tokenProvider } = useMint()\n  const [logoURIs, setLogoURIs] = useState<(string | undefined)[]>([])\n\n  const getLogoURIs = useCallback(async () => {\n    // Normal mint\n    const { logoURI } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    if (logoURI) return setLogoURIs([logoURI])\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { logoURI: logoURIA } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { logoURI: logoURIB } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setLogoURIs([logoURIA, logoURIB])\n    }\n    // Unknown mint\n    return setLogoURIs([undefined])\n  }, [mintAddress, pools, tokenProvider])\n\n  useEffect(() => {\n    getLogoURIs()\n  }, [getLogoURIs])\n\n  return (\n    <span onClick={onClick}>\n      <Avatar.Group style={{ display: 'block' }}>\n        {logoURIs.map((logoURI, i) => (\n          <Avatar\n            key={i}\n            src={logoURI}\n            size={size}\n            style={{ backgroundColor: '#f0f2f5', border: 'none' }}\n          >\n            <IonIcon name=\"diamond-outline\" />\n          </Avatar>\n        ))}\n      </Avatar.Group>\n    </span>\n  )\n}\n\nexport default MintAvatar\n","import { useCallback, useEffect, useState } from 'react'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintName = ({ mintAddress }: { mintAddress: string }) => {\n  const [name, setName] = useState('')\n  const { pools } = usePool() as { pools: Map<string, PoolData> }\n  const { tokenProvider } = useMint()\n\n  const getName = useCallback(async () => {\n    const { name } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    // Normal mint\n    if (name) return setName(name)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { symbol: symbol_a } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { symbol: symbol_b } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setName(`${symbol_a} • ${symbol_b} LPT`)\n    }\n    // Unknown mint\n    const shortenName = mintAddress.substring(0, 6)\n    return setName(shortenName)\n  }, [tokenProvider, mintAddress, pools])\n\n  useEffect(() => {\n    getName()\n  }, [getName])\n\n  return <span>{name}</span>\n}\n\nexport default MintName\n","import { useCallback, useEffect, useState } from 'react'\nimport { PoolData } from '@senswap/sen-js'\n\nimport { usePool, useMint } from 'senhub/providers'\n\nconst MintSymbol = ({ mintAddress }: { mintAddress: string }) => {\n  const [symbol, setSymbol] = useState('')\n  const { pools } = usePool() as { pools: Map<string, PoolData> }\n  const { tokenProvider } = useMint()\n\n  const getSymbol = useCallback(async () => {\n    const { symbol } = (await tokenProvider.findByAddress(mintAddress)) || {}\n    // Normal mint\n    if (symbol) return setSymbol(symbol)\n    // LP mint\n    const poolData = Object.values(pools).find(\n      ({ mint_lpt }) => mint_lpt === mintAddress,\n    )\n    if (poolData) {\n      const { mint_a, mint_b } = poolData\n      const { symbol: symbolA } =\n        (await tokenProvider.findByAddress(mint_a)) || {}\n      const { symbol: symbolB } =\n        (await tokenProvider.findByAddress(mint_b)) || {}\n      return setSymbol(`${symbolA} • ${symbolB}`)\n    }\n    // Unknown mint\n    return setSymbol('TOKEN')\n  }, [tokenProvider, mintAddress, pools])\n\n  useEffect(() => {\n    getSymbol()\n  }, [getSymbol])\n\n  return <span>{symbol}</span>\n}\n\nexport default MintSymbol\n","import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { account, AccountData, utils } from '@senswap/sen-js'\nimport { useAccount, useWallet, useMint } from 'senhub/providers'\nimport numbro from 'numbro'\n\nimport { Row, Col, Select, Space, Typography, Card } from 'antd'\nimport { MintAvatar, MintName, MintSymbol } from 'app/components/mint'\n\nimport { AppState } from 'app/model'\nimport { setMintAddress } from 'app/model/main.controller'\n\nconst MintSelection = () => {\n  const dispatch = useDispatch()\n  const [balance, setBalance] = useState('0')\n  const { mintAddress } = useSelector((state: AppState) => state.main)\n  const { accounts } = useAccount() as {\n    accounts: { [key: string]: AccountData }\n  }\n  const {\n    wallet: { address: walletAddress },\n  } = useWallet()\n  const { getMint } = useMint()\n\n  const getBalance = useCallback(async () => {\n    if (!account.isAddress(mintAddress) || !account.isAddress(walletAddress))\n      return setBalance('0')\n    const {\n      senos: { splt },\n    } = window\n    const {\n      [mintAddress]: { decimals },\n    } = await getMint({ address: mintAddress })\n    const accountAddress = await splt.deriveAssociatedAddress(\n      walletAddress,\n      mintAddress,\n    )\n    const { amount } = accounts[accountAddress] || { amount: BigInt(0) }\n    const balance = utils.undecimalize(amount, decimals)\n    return setBalance(balance)\n  }, [mintAddress, walletAddress, getMint, accounts])\n\n  useEffect(() => {\n    getBalance()\n  }, [getBalance])\n\n  return (\n    <Card>\n      <Row gutter={[16, 16]}>\n        <Col span={24}>\n          <Select\n            size=\"large\"\n            placeholder=\"Select token\"\n            style={{ width: '100%' }}\n            onChange={(mintAddress) =>\n              dispatch(setMintAddress(mintAddress as string))\n            }\n          >\n            {Object.values(accounts).map(({ mint: mintAddress }, i) => (\n              <Select.Option key={mintAddress + i} value={mintAddress}>\n                <Space align=\"center\">\n                  <MintAvatar mintAddress={mintAddress} />\n                  <Typography.Text type=\"secondary\">\n                    <MintSymbol mintAddress={mintAddress} />\n                  </Typography.Text>\n                  <Typography.Text>\n                    <MintName mintAddress={mintAddress} />\n                  </Typography.Text>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Col>\n        <Col span={24}>\n          <Space>\n            <Typography.Text type=\"secondary\">Balance:</Typography.Text>\n            <Typography.Text>\n              {numbro(balance || 0).format('0,0.[0000]')}\n            </Typography.Text>\n            <Typography.Text>\n              <MintSymbol mintAddress={mintAddress} />\n            </Typography.Text>\n          </Space>\n        </Col>\n      </Row>\n    </Card>\n  )\n}\n\nexport default MintSelection\n","import { useDispatch, useSelector } from 'react-redux'\nimport { account } from '@senswap/sen-js'\nimport numbro from 'numbro'\n\nimport {\n  Row,\n  Col,\n  Card,\n  Button,\n  Typography,\n  Tooltip,\n  Divider,\n  Space,\n} from 'antd'\nimport IonIcon from 'components/ionicon'\n\nimport { setData } from 'app/model/main.controller'\nimport { AppState } from 'app/model'\nimport { toBigInt } from 'helpers/util'\n\nconst Line = ({\n  index,\n  address,\n  amount,\n  onClick = () => {},\n  warning = '',\n  error = '',\n}: {\n  index: number\n  address: string\n  amount: string\n  onClick: (index: number) => void\n  warning?: string\n  error?: string\n}) => {\n  return (\n    <Row gutter={[16, 8]}>\n      <Col span={24}>\n        <Row gutter={[16, 8]} align=\"middle\" wrap={false}>\n          <Col>\n            <Typography.Text type=\"secondary\">#{index + 1}</Typography.Text>\n          </Col>\n          <Col span={12}>\n            <Tooltip title={address}>\n              <Typography.Text ellipsis>{address}</Typography.Text>\n            </Tooltip>\n          </Col>\n          <Col flex=\"auto\">\n            <Typography.Text>\n              {!toBigInt(amount) ? amount : numbro(amount).format('0,0')}\n            </Typography.Text>\n          </Col>\n          <Col>\n            <Space align=\"center\">\n              {warning ? (\n                <Tooltip title={warning}>\n                  <IonIcon\n                    name=\"alert-circle-outline\"\n                    style={{ color: '#FCB017' }}\n                  />\n                </Tooltip>\n              ) : null}\n              {error ? (\n                <Tooltip title={error}>\n                  <IonIcon\n                    name=\"warning-outline\"\n                    style={{ color: '#F2323F' }}\n                  />\n                </Tooltip>\n              ) : null}\n              <Button\n                type=\"text\"\n                icon={<IonIcon name=\"trash-outline\" />}\n                onClick={() => onClick(index)}\n              />\n            </Space>\n          </Col>\n        </Row>\n      </Col>\n      <Col span={24}>\n        <Divider style={{ margin: 0 }} />\n      </Col>\n    </Row>\n  )\n}\n\nconst Representor = () => {\n  const dispatch = useDispatch()\n  const { data } = useSelector((state: AppState) => state.main)\n\n  const remove = (index: number) => {\n    const nextData = [...data]\n    nextData.splice(index, 1)\n    return dispatch(setData(nextData))\n  }\n\n  return (\n    <Card\n      bodyStyle={{\n        padding: 16,\n        cursor: 'pointer',\n        height: 228,\n        overflow: 'auto',\n      }}\n      hoverable\n    >\n      <Row gutter={[8, 8]}>\n        {!data.length ? (\n          <Col span={24}>\n            <Typography.Text type=\"secondary\">No Data</Typography.Text>\n          </Col>\n        ) : null}\n        {data.map(([address, amount], i) => {\n          const error = !account.isAddress(address)\n            ? 'Invalid address'\n            : !toBigInt(amount)\n            ? 'Invalid amount'\n            : ''\n          const duplicatedIndex = data\n            .slice(0, i)\n            .findIndex(([addr]) => addr === address)\n          const warning =\n            duplicatedIndex >= 0\n              ? `Duplicated address to #${duplicatedIndex}`\n              : ''\n          return (\n            <Col key={address + i} span={24}>\n              <Line\n                index={i}\n                address={address}\n                amount={amount}\n                onClick={remove}\n                error={error}\n                warning={warning}\n              />\n            </Col>\n          )\n        })}\n      </Row>\n    </Card>\n  )\n}\n\nexport default Representor\n","import { Row, Col, Typography } from 'antd'\nimport Action from './action'\nimport Collector from './collector'\nimport MintSelection from './mintSelection'\nimport Representor from './representor'\n\nconst Page = () => {\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Typography.Title level={1}>Solana Bulk Sender</Typography.Title>\n      </Col>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <Collector />\n          </Col>\n          <Col span={24}>\n            <MintSelection />\n          </Col>\n        </Row>\n      </Col>\n      <Col xs={{ span: 24 }} md={{ span: 12 }}>\n        <Row gutter={[16, 16]}>\n          <Col span={24}>\n            <Representor />\n          </Col>\n          <Col span={24}>\n            <Action />\n          </Col>\n        </Row>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Page\n","import { Row, Col, Typography } from 'antd'\n\nimport configs from 'configs'\nimport { useUI } from 'senhub/providers'\n\nconst { env } = configs\n\nconst Widget = () => {\n  const {\n    ui: { width, infix },\n  } = useUI()\n\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Typography.Title level={5}>Widget</Typography.Title>\n        <Typography.Text>\n          Env: {env} - {width}px - {infix}\n        </Typography.Text>\n      </Col>\n    </Row>\n  )\n}\n\nexport default Widget\n","import { getDefaultMiddleware } from '@reduxjs/toolkit'\n\n// Need it cause https://github.com/GoogleChromeLabs/jsbi/issues/30\ndeclare global {\n  interface BigInt {\n    toJSON: (this: bigint) => string\n  }\n}\nBigInt.prototype.toJSON = function () {\n  return this.toString()\n}\n\nfunction isPlainObject(obj: object): boolean {\n  if (obj === null) return false\n  const proto = Object.getPrototypeOf(obj)\n  return proto !== null && Object.getPrototypeOf(proto) === null\n}\n\nfunction isPlain(val: any): boolean {\n  return (\n    typeof val === 'undefined' ||\n    val === null ||\n    typeof val === 'string' ||\n    typeof val === 'boolean' ||\n    typeof val === 'number' ||\n    Array.isArray(val) ||\n    isPlainObject(val) ||\n    typeof val === 'bigint'\n  )\n}\n\nconst middleware = getDefaultMiddleware({\n  serializableCheck: {\n    isSerializable: isPlain,\n  },\n})\n\nexport default middleware\n","// Bugfix performance\n// https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Troubleshooting.md#excessive-use-of-memory-and-cpu\nconst devTools = (appName: string): any => {\n  if ((process.env.REACT_APP_ENV || 'development') !== 'development')\n    return false\n  return {\n    name: appName,\n    actionSanitizer: ({ payload, type }: { payload: any; type: string }) => ({\n      payload,\n      type,\n    }),\n  }\n}\n\nexport default devTools\n","import { configureStore } from '@reduxjs/toolkit'\nimport middleware from 'store/middleware'\nimport devTools from 'store/devTools'\n\nimport main from 'app/model/main.controller'\n\n/**\n * Isolated store\n */\nconst model = configureStore({\n  middleware,\n  devTools: devTools('myapp'),\n  reducer: {\n    main,\n  },\n})\nexport type AppState = ReturnType<typeof model.getState>\nexport type AppDispatch = typeof model.dispatch\nexport default model\n","import { Provider } from 'react-redux'\nimport {\n  UIProvider,\n  WalletProvider,\n  AccountProvider,\n  MintProvider,\n  PoolProvider,\n} from 'senhub/providers'\n\nimport { ConfigProvider } from 'antd'\nimport PageView from './page'\nimport WidgetView from './widget'\n\nimport configs from 'configs'\nimport model from './model'\nimport 'static/styles/index.less'\n\nconst {\n  manifest: { appId },\n} = configs\n\nexport const Page = () => {\n  return (\n    <UIProvider>\n      <WalletProvider>\n        <AccountProvider>\n          <MintProvider>\n            <PoolProvider>\n              <Provider store={model}>\n                <ConfigProvider prefixCls={appId}>\n                  <PageView />\n                </ConfigProvider>\n              </Provider>\n            </PoolProvider>\n          </MintProvider>\n        </AccountProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n\nexport const Widget = () => {\n  return (\n    <UIProvider>\n      <WalletProvider>\n        <AccountProvider>\n          <MintProvider>\n            <PoolProvider>\n              <Provider store={model}>\n                <ConfigProvider prefixCls={appId}>\n                  <WidgetView />\n                </ConfigProvider>\n              </Provider>\n            </PoolProvider>\n          </MintProvider>\n        </AccountProvider>\n      </WalletProvider>\n    </UIProvider>\n  )\n}\n","import { forwardRef, Suspense } from 'react'\nimport { useRemoteModule } from 'react-dynamic-remote-component'\n\nconst IonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string } & any\n>(({ name, className, ...props }, ref) => {\n  const cln = className ? 'anticon ' + className : 'anticon'\n  return (\n    <span className={cln} {...props}>\n      <ion-icon ref={ref} name={name} />\n    </span>\n  )\n})\n\nexport default IonIcon\n\nexport const RemoteIonIcon = forwardRef<\n  HTMLElement,\n  { name: string; className?: string }\n>((props, ref) => {\n  const { default: Component } = useRemoteModule({\n    url: 'https://descartesnetwork.github.io/senhub/index.js',\n    scope: 'senhub',\n    module: './ionicon',\n  })\n  return (\n    <Suspense fallback=\"ionicon\">\n      <Component {...props} ref={ref} />\n    </Suspense>\n  )\n})\n","import { env, net } from './runtime'\nimport manifest from './manifest.config'\nimport sol from './sol.config'\n\nconst configs = {\n  env,\n  net,\n  manifest: manifest[env],\n  sol: sol[net],\n}\n\n/**\n * Module exports\n */\nexport default configs\n","import { Env } from './runtime'\n\nif (\n  typeof process.env.REACT_APP_ID !== 'string' ||\n  typeof process.env.REACT_APP_URL !== 'string' ||\n  typeof process.env.REACT_APP_SENHUB !== 'string'\n)\n  throw new Error('Please add REACT_APP_ID, REACT_APP_URL in .env!')\n\n/**\n * Contructor\n */\n\ntype Conf = {\n  appId: string\n  url: string\n  senhub: string\n}\n\nconst shared = {\n  appId: process.env.REACT_APP_ID,\n  url: process.env.REACT_APP_URL,\n  senhub: process.env.REACT_APP_SENHUB,\n}\n\nconst conf: Record<Env, Conf> = {\n  /**\n   * Development configurations\n   */\n  development: {\n    ...shared,\n  },\n\n  /**\n   * Staging configurations\n   */\n  staging: {\n    ...shared,\n  },\n\n  /**\n   * Production configurations\n   */\n  production: {\n    ...shared,\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","import storage from 'helpers/storage'\n\nexport type Env = 'development' | 'staging' | 'production'\nexport const env: Env = (process.env.REACT_APP_ENV as Env) || 'development'\n\nexport type Net = 'devnet' | 'testnet' | 'mainnet'\nexport const net: Net = (storage.get('network') as Net) || 'devnet'\n","import { Net } from './runtime'\n\nconst SOLVARS = {\n  spltAddress: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n  splataAddress: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n}\n\n/**\n * Contructor\n */\ntype Conf = {\n  node: string\n  chainId: 101 | 102 | 103\n  senAddress: string\n  swapAddress: string\n  taxmanAddress: string\n  bulksenderAddress: string\n} & typeof SOLVARS\n\nconst conf: Record<Net, Conf> = {\n  /**\n   * Development configurations\n   */\n  devnet: {\n    ...SOLVARS,\n    node: 'https://api.devnet.solana.com',\n    chainId: 103,\n    senAddress: '5YwUkPdXLoujGkZuo9B4LsLKj3hdkDcfP4derpspifSJ',\n    swapAddress: '4erFSLP7oBFSVC1t35jdxmbfxEhYCKfoM6XdG2BLR3UF',\n    taxmanAddress: '8UaZw2jDhJzv5V53569JbCd3bD4BnyCfBH3sjwgajGS9',\n    bulksenderAddress: 'FjkVzT6QJCQrgoZ8VoyAqysD5Mfa73ekpXWe9zDprWRA',\n  },\n\n  /**\n   * Staging configurations\n   */\n  testnet: {\n    ...SOLVARS,\n    node: 'https://api.testnet.solana.com',\n    chainId: 102,\n    senAddress: '',\n    swapAddress: '',\n    taxmanAddress: '',\n    bulksenderAddress: '',\n  },\n\n  /**\n   * Production configurations\n   */\n  mainnet: {\n    ...SOLVARS,\n    node: 'https://api.mainnet-beta.solana.com',\n    chainId: 101,\n    senAddress: 'SENBBKVCM7homnf5RX9zqpf1GFe935hnbU4uVzY1Y6M',\n    swapAddress: 'SSW7ooZ1EbEognq5GosbygA3uWW1Hq1NsFq6TsftCFV',\n    taxmanAddress: '9doo2HZQEmh2NgfT3Yx12M89aoBheycYqH1eaR5gKb3e',\n    bulksenderAddress: '',\n  },\n}\n\n/**\n * Module exports\n */\nexport default conf\n","const KEY = 'senhub'\nconst driver = window.localStorage\n\nconst convert = (value: string | null) => {\n  if (!value) return null\n  try {\n    return JSON.parse(value)\n  } catch (e) {\n    return null\n  }\n}\n\nconst storage = {\n  set: (key: string, value: any) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') data = {}\n    data[key] = value\n    driver.setItem(KEY, JSON.stringify(data))\n  },\n  get: (key: string) => {\n    let data = convert(driver.getItem(KEY))\n    if (!data || typeof data !== 'object') return null\n    return data[key]\n  },\n  clear: (key: string) => {\n    storage.set(key, null)\n  },\n}\n\nexport default storage\n","import { account } from '@senswap/sen-js'\nimport configs from 'configs'\n\nconst { net } = configs\n\nexport const isTouchable = () => {\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0\n}\n\nexport const asyncWait = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const openNewTab = (href: string) => {\n  return window.open(href, '_blank')\n}\n\nexport const shortenAddress = (address: string, num = 4, delimiter = '...') => {\n  return (\n    address.substring(0, num) +\n    delimiter +\n    address.substring(address.length - num, address.length)\n  )\n}\n\nexport const explorer = (addressOrTxId: string): string => {\n  if (account.isAddress(addressOrTxId)) {\n    return `https://explorer.solana.com/address/${addressOrTxId}?cluster=${net}`\n  }\n  return `https://explorer.solana.com/tx/${addressOrTxId}?cluster=${net}`\n}\n\nexport const toBigInt = (number: string): bigint => {\n  try {\n    return BigInt(number)\n  } catch (er) {\n    return BigInt(0)\n  }\n}\n"],"names":["NAME","setData","createAsyncThunk","data","setMintAddress","mintAddress","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","Object","assign","TxError","msg","txId","info","Error","nodeUrl","errorMapping","connection","throwError","er","defaultError","instructionError","InstructionError","Custom","sendTransaction","transaction","tx","serialize","sendRawTransaction","skipPreflight","preflightCommitment","confirmTransaction","err","value","addRecentCommitment","getRecentBlockhash","blockhash","recentBlockhash","addSignature","publicKey","signature","feePayer","this","Connection","soproxABI","require","ErrorMapping","Bulksender","bulksenderProgramAddress","spltProgramAddress","splataProgramAddress","bulksenderProgramId","spltProgramId","splataProgramId","_splt","simulateTransaction","checkedTransfer","amount","dstAddress","wallet","account","getAddress","payerAddress","payerPublicKey","deriveAssociatedAddress","srcAssociatedAddress","dstAssociatedAddress","srcAssociatedPublicKey","dstPublicKey","dstAssociatedPublicKey","mintPublicKey","Transaction","layout","struct","key","type","code","instruction","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","SYSVAR_RENT_PUBKEY","programId","toBuffer","add","rawSignTransaction","payerSig","buildCheckedBulkTransferTransaction","amounts","dstAddresses","length","num_txs","push","simulateBulkTransfer","checkedBulkTransfer","SPLT","Tx","configs","spltAddress","splataAddress","bulksenderAddress","node","dispatch","useDispatch","useState","loading","setLoading","bulk","setBulk","useSelector","main","notify","useUI","duplicated","useMemo","filter","index","address","expectedIndex","findIndex","expectedAddress","error","toBigInt","merge","useCallback","nextData","toString","send","bulksender","window","senos","transferData","map","description","onClick","open","explorer","console","log","message","computeBulk","currentData","newBulk","shift","currentBulk","simulatedBulk","ok","useEffect","Row","gutter","Col","span","Space","Typography","undefined","Button","icon","disabled","block","parse","file","Promise","resolve","reject","Papa","skipEmptyLines","complete","upload","remove","style","marginBottom","Upload","accept","beforeUpload","onRemove","maxCount","direction","size","align","level","pools","usePool","tokenProvider","useMint","logoURIs","setLogoURIs","getLogoURIs","findByAddress","logoURI","poolData","values","find","mint_lpt","mint_a","mint_b","logoURIA","logoURIB","Avatar","display","i","src","backgroundColor","border","setName","getName","symbol_a","symbol","symbol_b","shortenName","substring","setSymbol","getSymbol","symbolA","symbolB","balance","setBalance","accounts","useAccount","walletAddress","useWallet","getMint","getBalance","splt","decimals","accountAddress","BigInt","utils","Card","Select","placeholder","width","onChange","mint","numbro","format","Line","warning","wrap","Tooltip","title","ellipsis","flex","color","Divider","margin","splice","bodyStyle","padding","cursor","height","overflow","hoverable","duplicatedIndex","slice","xs","md","env","ui","infix","prototype","toJSON","getDefaultMiddleware","serializableCheck","isSerializable","val","Array","isArray","obj","proto","getPrototypeOf","isPlainObject","appName","configureStore","middleware","devTools","reducer","appId","Page","UIProvider","WalletProvider","AccountProvider","MintProvider","PoolProvider","Provider","store","model","ConfigProvider","prefixCls","Widget","IonIcon","forwardRef","ref","className","props","cln","RemoteIonIcon","Component","useRemoteModule","url","scope","module","default","Suspense","fallback","net","manifest","sol","shared","process","senhub","conf","development","staging","production","storage","SOLVARS","devnet","chainId","senAddress","swapAddress","taxmanAddress","testnet","mainnet","KEY","driver","localStorage","convert","JSON","e","set","getItem","setItem","stringify","get","clear","isTouchable","navigator","maxTouchPoints","addressOrTxId","number"],"sourceRoot":""}